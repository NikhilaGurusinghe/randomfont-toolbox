"use strict";(self.webpackChunkrandomfont=self.webpackChunkrandomfont||[]).push([[284],{453:(e,t,o)=>{var s=o(996),r=o.n(s);const n=o.p+"assets/images/test-D.c7efe051.png",a=o.p+"assets/images/test-D.7c5d7c02.png",i=new Map([["A",[n]],["D",[a]]]),l="DAransom";let d=0;const u=[],c=new Map;let h,g,w={x:0,y:0},f=0;new(r())(function(e){function t(t=!0){if(d>=8)return null;console.log(l[d]);const o=function(t,o=!0){const s=c.get(t);if(!s)return;const r=Math.floor(e.random()*s.length),n=s[r];return o&&s.splice(r,1),n}(l[d],t);return d+=1,o}e.preload=()=>{e.angleMode(e.DEGREES);const o=function(e){const t=function(e){return new URLSearchParams(window.location.search).get(e)}(e);if(null===t)return null;const o=Number(t);return Number.isFinite(o)?o:null}("random-seed");null!==o&&(e.randomSeed(o),console.log("sketch.ts | the current random seed (via query param) is: "+o)),i.forEach((t,o)=>{c.set(o,[]),t.forEach(t=>{c.get(o)?.push(e.loadImage(t))})});const s=t();void 0!==s?null!==s?(h=s,f=e.random(-30,30)):console.error("sketch.ts | Fatal Error: the first request for getNextRandomLetterImage() has reachedthe end of wordToSpell"):console.error('sketch.ts | Fatal Error: at letter "'+l[0]+'" there was no associated image paths in letterImageMap (.get returned undefined).')},e.setup=()=>{e.createCanvas(e.windowWidth,e.windowHeight),g=e.drawingContext,e.cursor("grab")},e.draw=()=>{e.clear(),u.forEach(({sticker:t,coordinates:o,rotation:s})=>{e.push(),e.translate(o.x+t.width/2,o.y+t.height/2),e.rotate(s),g.save(),g.shadowColor="rgba(0, 0, 0, 0.187)",g.shadowBlur=3,g.shadowOffsetX=0,g.shadowOffsetY=0,e.image(t,-t.width/2,-t.height/2),g.restore(),e.pop()});const t=e.mouseIsPressed&&"left"===e.mouseButton;t||(g.save(),g.shadowColor="rgba(0, 0, 0, 0.2)",g.shadowBlur=8,g.shadowOffsetX=-3,g.shadowOffsetY=3);const o=t?w.x:e.mouseX,s=t?w.y:e.mouseY,r=h.width*(t?.97:1),n=h.height*(t?.97:1);e.push(),e.translate(o,s),e.rotate(f),e.image(h,-r/2,-n/2,r,n),e.pop(),t||g.restore()},e.windowResized=()=>{e.resizeCanvas(e.windowWidth,e.windowHeight)},e.mousePressed=()=>{"left"===e.mouseButton&&(w.x=e.mouseX,w.y=e.mouseY)},e.mouseReleased=()=>{if("left"!==e.mouseButton)return;u.push({sticker:h,coordinates:{x:w.x-h.width/2,y:w.y-h.height/2},rotation:f});const o=t();void 0!==o?(null===o?console.log("NO MORE STICKERS!!"):(h=o,console.log(c)),f=e.random(-30,30),console.log(f)):console.error('sketch.ts | Fatal Error: at letter "'+l[0]+'" there was no associated image paths in letterImageMap (.get returned undefined).')}})}},e=>{e(e.s=453)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,