"use strict";
(self["webpackChunkrandomfont"] = self["webpackChunkrandomfont"] || []).push([[882],{

/***/ 293:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {


// EXTERNAL MODULE: ./node_modules/.pnpm/p5@1.11.10/node_modules/p5/lib/p5.min.js
var p5_min = __webpack_require__(996);
var p5_min_default = /*#__PURE__*/__webpack_require__.n(p5_min);
// EXTERNAL MODULE: ./node_modules/.pnpm/opentype.js@1.3.4/node_modules/opentype.js/dist/opentype.module.js
var opentype_module = __webpack_require__(652);
// EXTERNAL MODULE: ./src/assets/fonts/Libre_Baskerville/LibreBaskerville-Regular.ttf
var LibreBaskerville_Regular = __webpack_require__(496);
// EXTERNAL MODULE: ./src/renderers/otf/render-font.ts + 2 modules
var render_font = __webpack_require__(840);
// EXTERNAL MODULE: ./src/renderers/otf/render-strategy.ts
var render_strategy = __webpack_require__(922);
// EXTERNAL MODULE: ./src/renderers/otf/path-preprocessor.ts
var path_preprocessor = __webpack_require__(386);
;// ./src/experiments/medium/medium-word-erosion-values.ts
const mediumWordErosionValues = [
    0, 0, 0, 0, 0,
    0,
    0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
    0,
    0, 0, 0, 0, 0,
    0,
    0,
    0,
    0.2, 0.2, 0.2, 0.2, 0.2, 0.2,
    0,
    0, 0,
    0,
    0, 0, 0, 0, 0,
    0,
    0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,
    0,
    0, 0,
    0,
    0, 0, 0, 0, 0,
    0,
    0, 0, 0, 0, 0,
    0,
    0, 0, 0, 0,
    0,
    0, 0, 0, 0, 0,
    0,
    0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,
    0, 0, 0,
    0,
    0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35,
    0,
    0.40, 0.45, 0.50, 0.55,
    0,
    0.60, 0.65,
    0,
    0.70, 0.75, 0.80,
    0,
    0.85, 0.90, 0.95, 1, 1.5
];

;// ./src/experiments/medium/sketch.ts








function sketch(p5) {
    let libreBaskervilleRegOTF;
    let text = "We’re destroying words — scores of them, \n" +
        "hundreds of them, every day. We’re cutting\n" +
        "the language down to the bone.";
    const typeSize = 64;
    let textPaths;
    let unprocessedTextPaths;
    const lines = text.split(/\r?\n/);
    const freakToCrazinessValue = 1.36;
    const erosionStrengthValue = -3;
    function redrawFont(immediatelyRedraw = true) {
        p5.background(255);
        const maxLineWidth = Math.max(...lines.map(line => {
            const bb = libreBaskervilleRegOTF
                .getPath(line, 0, 0, typeSize, { kerning: true })
                .getBoundingBox();
            return bb.x2 - bb.x1;
        }));
        if (immediatelyRedraw) {
            let paths = render_font/* getTextPaths */.is(p5, libreBaskervilleRegOTF, text, typeSize, path_preprocessor/* freakTo */.H, { craziness: freakToCrazinessValue }, { align: "left", lineHeight: 1, marginX: (p5.windowWidth - maxLineWidth) / 2, marginY: 0 });
            textPaths = paths.processedTextPath;
            unprocessedTextPaths = paths.originalTextPath;
        }
        const textFillStatuses = unprocessedTextPaths === undefined ?
            render_font/* getTextFillStatuses */.DI(p5, textPaths) : render_font/* getTextFillStatuses */.DI(p5, unprocessedTextPaths);
        render_font/* renderFont */.Q1(p5, textPaths, textFillStatuses, render_strategy/* erode */.s, { erosionStrength: mediumWordErosionValues.map(x => x * erosionStrengthValue) }, unprocessedTextPaths);
    }
    p5.setup = () => {
        p5.createCanvas(p5.windowWidth, p5.windowHeight);
        opentype_module/* default.load */.Ay.load(LibreBaskerville_Regular, (error, font) => {
            if (error) {
                console.log("opentype.js | " + LibreBaskerville_Regular + " could not be loaded: " + error);
            }
            else {
                if (font !== undefined) {
                    libreBaskervilleRegOTF = font;
                    redrawFont();
                    console.log("opentype.js | " + LibreBaskerville_Regular + " loaded.");
                }
                else {
                    console.log("opentype.js | " + LibreBaskerville_Regular + " could not be loaded: it was undefined");
                }
            }
        });
    };
    p5.windowResized = () => {
        p5.resizeCanvas(p5.windowWidth, p5.windowHeight);
        redrawFont();
    };
    p5.keyPressed = () => {
        let needsUpdate = false;
        if (p5.key === "ArrowUp") {
            needsUpdate = true;
        }
        if (needsUpdate)
            redrawFont();
    };
}
new (p5_min_default())(sketch);


/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, [652,191], () => (__webpack_exec__(293)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,