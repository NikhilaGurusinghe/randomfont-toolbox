(self.webpackChunkrandomfont=self.webpackChunkrandomfont||[]).push([[962],{97:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Bold.ttf"},164:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Italic.ttf"},386:(e,t,o)=>{"use strict";function n(e,t,o){let n;null!=o&&"craziness"in o?n=o.craziness:(console.error("path-preprocessor.ts | freakTo received malformed options parameter."),n=3);let s=JSON.parse(JSON.stringify(t));for(let o=0;o<t.length;o++){const r=t[o];let l=[],a={x:0,y:0};for(let s=0;s<r.commands.length;s++){let i=r.commands[s];switch(i.type){case"M":l.push({type:"M",x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)});break;case"L":let r=[];for(let t=0;t<e.random(0,n-1);t++)r.push(e.random(0,.9));r.sort((e,t)=>e-t);for(let y of r){let r=e.lerp(a.x,i.x,y),d=e.lerp(a.y,i.y,y);t[o].commands.splice(s,0,{type:"L",x:r,y:d}),l.push({type:"L",x:r+e.random(-n/1.5,n/1.5),y:d+e.random(-n/1.5,n/1.5)})}l.push({type:"L",x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)}),s+=r.length;break;case"C":l.push({type:"C",x1:i.x1+e.random(-n,n),y1:i.y1+e.random(-n,n),x2:i.x2+e.random(-n,n),y2:i.y2+e.random(-n,n),x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)});break;case"Q":l.push({type:"Q",x1:i.x1+e.random(-n,n),y1:i.y1+e.random(-n,n),x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)});break;case"Z":l.push({type:"Z"})}"Z"!==i.type&&(a.x=i.x,a.y=i.y)}s[o].commands=l}return s}o.d(t,{H:()=>n})},493:(e,t,o)=>{"use strict";function n(e){let t=0;for(let o of e.commands)"Z"===o.type&&(t+=1);return 0===t?0:t-1}function s(e){let t=0,o=[[]];for(let n=0;n<e.commands.length;n++){let s=e.commands[n];"Z"!==s.type?o[t].push(s):(o[t].push(s),t++,n!==e.commands.length-1&&o.push([]))}return o}function r(e){for(let t of e)if("C"===t.type||"L"===t.type||"Q"===t.type)return{x:t.x,y:t.y};return null}function l(e,t){let o="";for(let n of e)switch(o+=n.type+" ",n.type){case"M":case"L":o+=n.x.toFixed(t)+","+n.y.toFixed(t);break;case"C":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x2.toFixed(t)+","+n.y2.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t);break;case"Q":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t)}return o}var a;o.d(t,{eV:()=>a,is:()=>d,Q1:()=>p,Yc:()=>y,$Q:()=>i}),function(e){e.FILLED="filled",e.OPEN="open"}(a||(a={}));const i=0,y=255;function d(e,t,o,n,s,r){const l=t.getPath(o,0,0,n,{kerning:!0}).getBoundingBox(),a=l.y2-l.y1,i=l.x2-l.x1;let y=t.getPaths(o,(e.windowWidth-i)/2,(e.windowHeight-a+n)/2,n,{kerning:!0}),d=s(e,y,r);return y.length!==d.length&&console.error("render-font.ts | something has gone wrong in otf\render-font.ts#getTextPaths regarding the lengths of the outputted otf.Path[]"),{originalTextPath:y,processedTextPath:d}}function p(e,t,o,i,y){const d=function(e,t){const o=function(e,t){e%2==0&&(e+=1,console.error("render-font-otf.ts | generateSampleOffsetGrid received an even side length of "+(e-1)+". The actual side length of the grid generated will be odd: "+e));let o=[],n=Math.floor(e/2);for(let e=n;e>=-n;e--)for(let s=-n;s<=n;s++)o.push([s*t,-e*t]);return o}(5,2),i=e.drawingContext;let y=[];for(let d=0;d<t.length;d++){const p=t[d],c=n(p);if(y.push([]),c<=0){y[d].push(a.FILLED);continue}let x=s(p);for(let t of x){let n=r(t);if(null==n){console.error("render-font-otf.ts | samplePoint.x and samplePoint.y was null");break}let s={x:n.x,y:n.y},c=!1;for(let r of o){s.x=n.x+r[0],s.y=n.y+r[1];const o=new Path2D(l(t,3)),x=i.isPointInPath(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y),f=i.isPointInStroke(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y);if(x&&!f){c=!0;let t=new Path2D(p.toPathData(3));const o=i.isPointInPath(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y),n=i.isPointInStroke(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y);o||n?y[d].push(a.FILLED):y[d].push(a.OPEN);break}}c||console.error("render-font-otf.ts | getTextFillStatuses could not find a suitable sample point (at character index "+d+") for calculating text fill status")}}return y}(e,void 0===y?t:y);return void 0!==i&&void 0!==y&&(i.unprocessedTextPaths=y),o(e,t,d,i),t}},496:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Regular.ttf"},541:(e,t,o)=>{"use strict";o.d(t,{s:()=>s});var n=o(493);function s(e,t,o,s){let r,l;if(void 0!==s&&"erosionStrength"in s&&"unprocessedTextPaths"in s){r=s.erosionStrength,l=s.unprocessedTextPaths,e.push(),e.noStroke();for(let s=0;s<t.length;s++){const a=t[s],i=l[s],y=o[s];let d=0;y[d]===n.eV.FILLED?e.fill(n.$Q):y[d]===n.eV.OPEN&&e.fill(n.Yc);let p={x:0,y:0};for(let t=0;t<a.commands.length;t++){let o,s,l,c,x,f=a.commands[t],h=i.commands[t];f.type!==h.type&&console.error("render-strategy.ts | something has gone wrong in otf\render-font.ts#getTextPaths regarding the lengths of the outputted otf.Path[]"),"M"===f.type&&"M"===h.type?(e.beginShape(),o=h.y-p.y,s=p.x-h.x,l=Math.sqrt(o**2+s**2),c=o/l*r,x=s/l*r,e.vertex(f.x+c,f.y+x),p.x=h.x,p.y=h.y):"L"===f.type&&"L"===h.type?(o=h.y-p.y,s=p.x-h.x,l=Math.sqrt(o**2+s**2),c=o/l*r/1.5,x=s/l*r/1.5,e.vertex(f.x+c,f.y+x),p.x=h.x,p.y=h.y):"C"===f.type&&"C"===h.type?(console.error("render-strategy.ts | a cubic bezier was drawn! This is really bad."),e.bezierVertex(f.x1,f.y1,f.x2,f.y2,f.x,f.y),p.x=h.x,p.y=h.y):"Q"===f.type&&"Q"===h.type?(o=h.y-h.y1,s=h.x1-h.x,l=Math.sqrt(o**2+s**2),c=o/l*r,x=s/l*r,e.quadraticVertex(f.x1+c,f.y1+x,f.x+c,f.y+x),p.x=h.x,p.y=h.y):"Z"===f.type&&"Z"===h.type&&(e.endShape(e.CLOSE),d++,y[d]===n.eV.FILLED?e.fill(n.$Q):y[d]===n.eV.OPEN&&e.fill(n.Yc))}}e.pop()}else console.error("render-strategy.ts | freakToEroded received malformed options parameter.")}},670:(e,t,o)=>{"use strict";var n=o(996),s=o.n(n),r=o(652),l=o(496),a=o(164),i=o(97),y=o(493),d=o(541),p=o(386);new(s())(function(e){let t,o,n,s,c,x,f,h,u,g,m=["Archaeopteryx","The “Big Five”","End-Ordovician","Late Devonian","End-Permian","End-Triassic","End-Cretaceous"],w=m[Math.round(e.random(0,m.length-1))];function P(t=!0){if(e.background(255),t){let t=y.is(e,o,w,148,p.H,{craziness:u.value()});c=t.processedTextPath,x=t.originalTextPath}y.Q1(e,c,d.s,{erosionStrength:-f.value()},x)}e.preload=()=>{t=e.loadFont(l),n=e.loadFont(a),s=e.loadFont(i)},e.setup=()=>{window.addEventListener("afterprint",()=>{P(!1),f.value(parseFloat(String(f.value()))+2),h.html(String(f.value()))}),e.createCanvas(e.windowWidth,e.windowHeight),r.Ay.load(l,(e,t)=>{e?console.log("opentype.js | "+l+" could not be loaded: "+e):void 0!==t?(o=t,P(),console.log("opentype.js | "+l+" loaded.")):console.log("opentype.js | "+l+" could not be loaded: it was undefined")}),u=e.createSlider(0,10,3.56,.01),u.position(65,10),u.size(200);let t=e.createP("crazy");t.style("position: absolute"),t.style("font-family: monospace"),t.style("font-weight: bold"),t.style("font-size: 15px"),t.style("left: 10px"),t.style("top: -3px"),g=e.createP(String(u.value())),g.style("position: absolute"),g.style("font-family: monospace"),g.style("font-size: 15px"),g.style("left: 285px"),g.style("top: -3px"),u.changed(()=>{P(),g.html(String(u.value())),console.log(u.value())}),f=e.createSlider(0,10,4.44,.01),f.position(65,50),f.size(200);let n=e.createP("erode");n.style("position: absolute"),n.style("font-family: monospace"),n.style("font-weight: bold"),n.style("font-size: 15px"),n.style("left: 10px"),n.style("top: 37px"),h=e.createP(String(f.value())),h.style("position: absolute"),h.style("font-family: monospace"),h.style("font-size: 15px"),h.style("left: 285px"),h.style("top: 37px"),f.changed(()=>{P(!1),h.html(String(f.value()))})},e.windowResized=()=>{e.resizeCanvas(e.windowWidth,e.windowHeight),P(!1)},e.keyPressed=()=>{let t=!1;1===e.key.length?(e.key,w+=e.key,t=!0):"Backspace"===e.key?(w=w.slice(0,w.length-1),t=!0):"Enter"===e.key?w+="\n":"ArrowUp"===e.key&&(t=!0),t&&P()}})},753:()=>{}},e=>{e.O(0,[652],()=>e(e.s=670)),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,