(self.webpackChunkrandomfont=self.webpackChunkrandomfont||[]).push([[660],{97:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Bold.ttf"},164:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Italic.ttf"},386:(e,t,o)=>{"use strict";function n(e,t,o){let n;null!=o&&"craziness"in o?n=o.craziness:(console.error("path-preprocessor.ts | freakTo received malformed options parameter."),n=3);let s=JSON.parse(JSON.stringify(t));for(let o=0;o<t.length;o++){const r=t[o];let l=[],a={x:0,y:0};for(let s=0;s<r.commands.length;s++){let i=r.commands[s];switch(i.type){case"M":l.push({type:"M",x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)});break;case"L":let r=[];for(let t=0;t<e.random(0,n-1);t++)r.push(e.random(0,.9));r.sort((e,t)=>e-t);for(let y of r){let r=e.lerp(a.x,i.x,y),d=e.lerp(a.y,i.y,y);t[o].commands.splice(s,0,{type:"L",x:r,y:d}),l.push({type:"L",x:r+e.random(-n/1.5,n/1.5),y:d+e.random(-n/1.5,n/1.5)})}l.push({type:"L",x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)}),s+=r.length;break;case"C":l.push({type:"C",x1:i.x1+e.random(-n,n),y1:i.y1+e.random(-n,n),x2:i.x2+e.random(-n,n),y2:i.y2+e.random(-n,n),x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)});break;case"Q":l.push({type:"Q",x1:i.x1+e.random(-n,n),y1:i.y1+e.random(-n,n),x:i.x+e.random(-n,n),y:i.y+e.random(-n,n)});break;case"Z":l.push({type:"Z"})}"Z"!==i.type&&(a.x=i.x,a.y=i.y)}s[o].commands=l}return s}o.d(t,{H:()=>n})},387:(e,t,o)=>{"use strict";var n=o(996),s=o.n(n),r=o(652),l=o(496),a=o(164),i=o(97),y=o(493),d=o(541),p=o(386);new(s())(function(e){let t,o,n,s,c,x,f,h,u,g,m=["Archaeopteryx","The “Big Five”","End-Ordovician","Late Devonian","End-Permian","End-Triassic","End-Cretaceous"],w=m[Math.round(e.random(0,m.length-1))];function P(t=!0){if(e.background(255),t){let t=y.is(e,o,w,148,p.H,{craziness:u.value()});c=t.processedTextPath,x=t.originalTextPath}y.Q1(e,c,d.s,{erosionStrength:-f.value()},x)}e.preload=()=>{t=e.loadFont(l),n=e.loadFont(a),s=e.loadFont(i)},e.setup=()=>{window.addEventListener("afterprint",()=>{P(!1),f.value(parseFloat(String(f.value()))+2),h.html(String(f.value()))}),e.createCanvas(e.windowWidth,e.windowHeight),r.Ay.load(l,(e,t)=>{e?console.log("opentype.js | "+l+" could not be loaded: "+e):void 0!==t?(o=t,P(),console.log("opentype.js | "+l+" loaded.")):console.log("opentype.js | "+l+" could not be loaded: it was undefined")}),u=e.createSlider(0,10,3.56,.01),u.position(65,10),u.size(200);let t=e.createP("crazy");t.style("position: absolute"),t.style("font-family: monospace"),t.style("font-weight: bold"),t.style("font-size: 15px"),t.style("left: 10px"),t.style("top: -3px"),g=e.createP(String(u.value())),g.style("position: absolute"),g.style("font-family: monospace"),g.style("font-size: 15px"),g.style("left: 285px"),g.style("top: -3px"),u.changed(()=>{P(),g.html(String(u.value())),console.log(u.value())}),f=e.createSlider(0,10,4.44,.01),f.position(65,50),f.size(200);let n=e.createP("erode");n.style("position: absolute"),n.style("font-family: monospace"),n.style("font-weight: bold"),n.style("font-size: 15px"),n.style("left: 10px"),n.style("top: 37px"),h=e.createP(String(f.value())),h.style("position: absolute"),h.style("font-family: monospace"),h.style("font-size: 15px"),h.style("left: 285px"),h.style("top: 37px"),f.changed(()=>{P(!1),h.html(String(f.value()))})},e.windowResized=()=>{e.resizeCanvas(e.windowWidth,e.windowHeight),P(!1)},e.keyPressed=()=>{let t=!1;1===e.key.length?(e.key,w+=e.key,t=!0):"Backspace"===e.key?(w=w.slice(0,w.length-1),t=!0):"Enter"===e.key?w+="\n":"ArrowUp"===e.key&&(t=!0),t&&P()}})},493:(e,t,o)=>{"use strict";function n(e){let t=0;for(let o of e.commands)"Z"===o.type&&(t+=1);return 0===t?0:t-1}function s(e){let t=0,o=[[]];for(let n=0;n<e.commands.length;n++){let s=e.commands[n];"Z"!==s.type?o[t].push(s):(o[t].push(s),t++,n!==e.commands.length-1&&o.push([]))}return o}function r(e){for(let t of e)if("C"===t.type||"L"===t.type||"Q"===t.type)return{x:t.x,y:t.y};return null}function l(e,t){let o="";for(let n of e)switch(o+=n.type+" ",n.type){case"M":case"L":o+=n.x.toFixed(t)+","+n.y.toFixed(t);break;case"C":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x2.toFixed(t)+","+n.y2.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t);break;case"Q":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t)}return o}var a;o.d(t,{eV:()=>a,is:()=>d,Q1:()=>p,Yc:()=>y,$Q:()=>i}),function(e){e.FILLED="filled",e.OPEN="open"}(a||(a={}));const i=0,y=255;function d(e,t,o,n,s,r){const l=t.getPath(o,0,0,n,{kerning:!0}).getBoundingBox(),a=l.y2-l.y1,i=l.x2-l.x1;let y=t.getPaths(o,(e.windowWidth-i)/2,(e.windowHeight-a+n)/2,n,{kerning:!0}),d=s(e,y,r);return y.length!==d.length&&console.error("render-font.ts | something has gone wrong in otf\render-font.ts#getTextPaths regarding the lengths of the outputted otf.Path[]"),{originalTextPath:y,processedTextPath:d}}function p(e,t,o,i,y){const d=function(e,t){const o=function(e,t){e%2==0&&(e+=1,console.error("render-font-otf.ts | generateSampleOffsetGrid received an even side length of "+(e-1)+". The actual side length of the grid generated will be odd: "+e));let o=[],n=Math.floor(e/2);for(let e=n;e>=-n;e--)for(let s=-n;s<=n;s++)o.push([s*t,-e*t]);return o}(5,2),i=e.drawingContext;let y=[];for(let d=0;d<t.length;d++){const p=t[d],c=n(p);if(y.push([]),c<=0){y[d].push(a.FILLED);continue}let x=s(p);for(let t of x){let n=r(t);if(null==n){console.error("render-font-otf.ts | samplePoint.x and samplePoint.y was null");break}let s={x:n.x,y:n.y},c=!1;for(let r of o){s.x=n.x+r[0],s.y=n.y+r[1];const o=new Path2D(l(t,3)),x=i.isPointInPath(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y),f=i.isPointInStroke(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y);if(x&&!f){c=!0;let t=new Path2D(p.toPathData(3));const o=i.isPointInPath(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y),n=i.isPointInStroke(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y);o||n?y[d].push(a.FILLED):y[d].push(a.OPEN);break}}c||console.error("render-font-otf.ts | getTextFillStatuses could not find a suitable sample point (at character index "+d+") for calculating text fill status")}}return y}(e,void 0===y?t:y);return void 0!==i&&void 0!==y&&(i.unprocessedTextPaths=y),o(e,t,d,i),t}},496:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Regular.ttf"},541:(e,t,o)=>{"use strict";o.d(t,{s:()=>s});var n=o(493);function s(e,t,o,s){let r,l;if(void 0!==s&&"erosionStrength"in s&&"unprocessedTextPaths"in s){r=s.erosionStrength,l=s.unprocessedTextPaths,e.push(),e.noStroke();for(let s=0;s<t.length;s++){const a=t[s],i=l[s],y=o[s];let d=0;y[d]===n.eV.FILLED?e.fill(n.$Q):y[d]===n.eV.OPEN&&e.fill(n.Yc);let p={x:0,y:0};for(let t=0;t<a.commands.length;t++){let o,s,l,c,x,f=a.commands[t],h=i.commands[t];f.type!==h.type&&console.error("render-strategy.ts | something has gone wrong in otf\render-font.ts#getTextPaths regarding the lengths of the outputted otf.Path[]"),"M"===f.type&&"M"===h.type?(e.beginShape(),o=h.y-p.y,s=p.x-h.x,l=Math.sqrt(o**2+s**2),c=o/l*r,x=s/l*r,e.vertex(f.x+c,f.y+x),p.x=h.x,p.y=h.y):"L"===f.type&&"L"===h.type?(o=h.y-p.y,s=p.x-h.x,l=Math.sqrt(o**2+s**2),c=o/l*r/1.5,x=s/l*r/1.5,e.vertex(f.x+c,f.y+x),p.x=h.x,p.y=h.y):"C"===f.type&&"C"===h.type?(console.error("render-strategy.ts | a cubic bezier was drawn! This is really bad."),e.bezierVertex(f.x1,f.y1,f.x2,f.y2,f.x,f.y),p.x=h.x,p.y=h.y):"Q"===f.type&&"Q"===h.type?(o=h.y-h.y1,s=h.x1-h.x,l=Math.sqrt(o**2+s**2),c=o/l*r,x=s/l*r,e.quadraticVertex(f.x1+c,f.y1+x,f.x+c,f.y+x),p.x=h.x,p.y=h.y):"Z"===f.type&&"Z"===h.type&&(e.endShape(e.CLOSE),d++,y[d]===n.eV.FILLED?e.fill(n.$Q):y[d]===n.eV.OPEN&&e.fill(n.Yc))}}e.pop()}else console.error("render-strategy.ts | freakToEroded received malformed options parameter.")}},753:()=>{}},e=>{e.O(0,[652],()=>e(e.s=387)),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bUIvSSxHQUNiLE1BQWpCRyxFQUFRQyxNQUE0QyxNQUE1QjJJLEVBQW1CM0ksTUFDbERoQixRQUFRQyxNQUFNLHNFQUVkTCxFQUFHbUssYUFDQ2hKLEVBQVFjLEdBQ1JkLEVBQVFlLEdBQ1JmLEVBQVFnQixHQUNSaEIsRUFBUWlCLEdBQ1JqQixFQUFRSixFQUNSSSxFQUFRSCxHQUdaRixFQUFjQyxFQUFJZ0osRUFBbUJoSixFQUNyQ0QsRUFBY0UsRUFBSStJLEVBQW1CL0ksR0FDYixNQUFqQkcsRUFBUUMsTUFBNEMsTUFBNUIySSxFQUFtQjNJLE1BQ2xEc0ksRUFBS0ssRUFBbUIvSSxFQUFJK0ksRUFBbUI3SCxHQUMvQ3lILEVBQUtJLEVBQW1COUgsR0FBSzhILEVBQW1CaEosRUFDaEQ2SSxFQUFZNUcsS0FBS2lILEtBQUtQLEdBQU0sRUFBSUMsR0FBTSxHQUN0Q0UsRUFBV0gsRUFBS0UsRUFBYVIsRUFDN0JVLEVBQVdILEVBQUtDLEVBQWFSLEVBQzdCcEosRUFBR29LLGdCQUNDakosRUFBUWMsR0FBSzRILEVBQ2IxSSxFQUFRZSxHQUFLNEgsRUFDYjNJLEVBQVFKLEVBQUk4SSxFQUNaMUksRUFBUUgsRUFBSThJLEdBR2hCaEosRUFBY0MsRUFBSWdKLEVBQW1CaEosRUFDckNELEVBQWNFLEVBQUkrSSxFQUFtQi9JLEdBQ2IsTUFBakJHLEVBQVFDLE1BQTRDLE1BQTVCMkksRUFBbUIzSSxPQUNsRHBCLEVBQUdxSyxTQUFTckssRUFBR3NLLE9BRWZkLElBQ0lELEVBQW9CQyxLQUEyQixLQUFXdkIsT0FDMURqSSxFQUFHeUosS0FBSyxNQUNERixFQUFvQkMsS0FBMkIsS0FBV1AsTUFDakVqSixFQUFHeUosS0FBSyxNQUdwQixDQUNKLENBQ0F6SixFQUFHdUssS0F4R0gsTUFMSW5LLFFBQVFDLE1BQU0sMkVBOEd0QixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9yZW5kZXJlcnMvb3RmL3BhdGgtcHJlcHJvY2Vzc29yLnRzIiwid2VicGFjazovL3JhbmRvbWZvbnQvLi9zcmMvZXhwZXJpbWVudHMvbGFyZ2Uvc2tldGNoLnRzIiwid2VicGFjazovL3JhbmRvbWZvbnQvLi9zcmMvcmVuZGVyZXJzL290Zi91dGlsL3R5cGUtY291bnRlcnMudHMiLCJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9yZW5kZXJlcnMvb3RmL3V0aWwvb3RmLXBhdGgtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9yZW5kZXJlcnMvb3RmL3JlbmRlci1mb250LnRzIiwid2VicGFjazovL3JhbmRvbWZvbnQvLi9zcmMvcmVuZGVyZXJzL290Zi9yZW5kZXItc3RyYXRlZ3kudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHA1IGZyb20gXCJwNVwiO1xyXG5pbXBvcnQgb3RmIGZyb20gXCJvcGVudHlwZS5qc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5vUHJlcHJvY2VzcyhfcDU6IHA1LCB0ZXh0UGF0aHM6IG90Zi5QYXRoW10pOiBvdGYuUGF0aFtdIHtcclxuICAgIHJldHVybiB0ZXh0UGF0aHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmcmVha1RvKHA1OiBwNSwgdGV4dFBhdGhzOiBvdGYuUGF0aFtdLCBvcHRpb25zPzogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSk6IG90Zi5QYXRoW10ge1xyXG4gICAgbGV0IHJhbmRvbVVuaXQ6IG51bWJlcjtcclxuXHJcbiAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB1bmRlZmluZWQgfHwgIShcImNyYXppbmVzc1wiIGluIG9wdGlvbnMpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcInBhdGgtcHJlcHJvY2Vzc29yLnRzIHwgZnJlYWtUbyByZWNlaXZlZCBtYWxmb3JtZWQgb3B0aW9ucyBwYXJhbWV0ZXIuXCIpO1xyXG4gICAgICAgIHJhbmRvbVVuaXQgPSAzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByYW5kb21Vbml0ID0gb3B0aW9uc1tcImNyYXppbmVzc1wiXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcHJvY2Vzc2VkVGV4dFBhdGhzOiBvdGYuUGF0aFtdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0ZXh0UGF0aHMpKTtcclxuXHJcbiAgICBmb3IgKGxldCBjaGFyYWN0ZXJJbmRleCA9IDA7IGNoYXJhY3RlckluZGV4IDwgdGV4dFBhdGhzLmxlbmd0aDsgY2hhcmFjdGVySW5kZXgrKyl7XHJcbiAgICAgICAgLy8gZ2V0IG90Zi5QYXRoIG9iamVjdCBmb3IgY3VycmVudCBjaGFyYWN0ZXJcclxuICAgICAgICBjb25zdCBjaGFyYWN0ZXJQYXRoOiBvdGYuUGF0aCA9IHRleHRQYXRoc1tjaGFyYWN0ZXJJbmRleF07XHJcbiAgICAgICAgLy8gVGhpcyB3aWxsIGFjY3VtdWxhdGUgYWxsIHRoZSBuZXcgcmFuZG9taXplZCBwYXRoIGNvbW1hbmRzIHRoYXQgd2Ugd2FudFxyXG4gICAgICAgIGxldCBuZXdDaGFyYWN0ZXJQYXRoQ29tbWFuZHM6IG90Zi5QYXRoQ29tbWFuZFtdID0gW107XHJcblxyXG4gICAgICAgIGxldCBwcmV2aW91c1BvaW50OiBQb2ludCA9IHsgeDogMCwgeTogMCB9O1xyXG5cclxuICAgICAgICAvLyBwcm9jZXNzIGFsbCBwYXRoIGNvbW1hbmRzIGZvciB0aGlzIGN1cnJlbnQgY2hhcmFjdGVyXHJcbiAgICAgICAgZm9yIChsZXQgY2hhclBhdGhDb21tYW5kSW5kZXggPSAwOyBjaGFyUGF0aENvbW1hbmRJbmRleCA8IGNoYXJhY3RlclBhdGguY29tbWFuZHMubGVuZ3RoOyBjaGFyUGF0aENvbW1hbmRJbmRleCsrKXtcclxuICAgICAgICAgICAgbGV0IGNvbW1hbmQgPSBjaGFyYWN0ZXJQYXRoLmNvbW1hbmRzW2NoYXJQYXRoQ29tbWFuZEluZGV4XTtcclxuICAgICAgICAgICAgc3dpdGNoIChjb21tYW5kLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJNXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hhcmFjdGVyUGF0aENvbW1hbmRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIk1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogY29tbWFuZC54ICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogY29tbWFuZC55ICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgb3RmLlBhdGhDb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJMXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxlcnBJbnRlcnZhbHM6IG51bWJlcltdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwNS5yYW5kb20oMCwgcmFuZG9tVW5pdCAtIDEpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVycEludGVydmFscy5wdXNoKHA1LnJhbmRvbSgwLCAwLjkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGVycEludGVydmFscy5zb3J0KChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gYSAtIGIpOyAvLyBzb3J0IGluIGFzY2VuZGluZyBvcmRlclxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGxlcnBJbnRlcnZhbCBvZiBsZXJwSW50ZXJ2YWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZXJwZWRYOiBudW1iZXIgPSBwNS5sZXJwKHByZXZpb3VzUG9pbnQueCwgY29tbWFuZC54LCBsZXJwSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVycGVkWTogbnVtYmVyID0gcDUubGVycChwcmV2aW91c1BvaW50LnksIGNvbW1hbmQueSwgbGVycEludGVydmFsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBvcmlnaW5hbCB0ZXh0UGF0aHMgYXMgd2UgYXJlIGFkZGluZyBjb21tYW5kcyB0aGF0IG5lZWQgdG9cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmUgcmVmbGVjdGVkIGluIHRoZSBvcmlnaW5hbCB0ZXh0UGF0aHMgKGNhdXNlIHdlIG1pZ2h0IG5lZWQgdG8gdXNlIHRoZSBvcmlnaW5hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZXh0UGF0aHMgb3V0c2lkZSBvZiBoZXJlKSAtLSB0aGlzIHdvcmtzIGZpbmUgY2F1c2UgYXJyYXlzIGFyZSBwYXNzZWQgYnkgcmVmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRQYXRoc1tjaGFyYWN0ZXJJbmRleF0uY29tbWFuZHMuc3BsaWNlKGNoYXJQYXRoQ29tbWFuZEluZGV4LCAwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IGxlcnBlZFgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBsZXJwZWRZXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gYXMgb3RmLlBhdGhDb21tYW5kKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoYXJhY3RlclBhdGhDb21tYW5kcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiTFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogbGVycGVkWCArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdC8xLjUsIHJhbmRvbVVuaXQvMS41KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGxlcnBlZFkgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQvMS41LCByYW5kb21Vbml0LzEuNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBvdGYuUGF0aENvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hhcmFjdGVyUGF0aENvbW1hbmRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogY29tbWFuZC54ICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogY29tbWFuZC55ICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgb3RmLlBhdGhDb21tYW5kKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXMgd2UgaGF2ZSB1cGRhdGVkIHRoZSB0ZXh0UGF0aHMgYnkgcmVmZXJlbmNlIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSBjaGFyUGF0aENvbW1hbmRJbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGJlIGFmdGVyIHRoZSBvcmlnaW5hbCBcIkxcIiBjb21tYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhclBhdGhDb21tYW5kSW5kZXggKz0gbGVycEludGVydmFscy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkNcIjpcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGFyYWN0ZXJQYXRoQ29tbWFuZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MTogY29tbWFuZC54MSArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBjb21tYW5kLnkxICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDI6IGNvbW1hbmQueDIgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5MjogY29tbWFuZC55MiArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGNvbW1hbmQueCAgICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogY29tbWFuZC55ICAgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBvdGYuUGF0aENvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlFcIjpcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGFyYWN0ZXJQYXRoQ29tbWFuZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MTogY29tbWFuZC54MSArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBjb21tYW5kLnkxICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogY29tbWFuZC54ICAgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBjb21tYW5kLnkgICArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdClcclxuICAgICAgICAgICAgICAgICAgICB9IGFzIG90Zi5QYXRoQ29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiWlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoYXJhY3RlclBhdGhDb21tYW5kcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJaXCJcclxuICAgICAgICAgICAgICAgICAgICB9IGFzIG90Zi5QYXRoQ29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kLnR5cGUgIT09IFwiWlwiKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1BvaW50LnggPSBjb21tYW5kLng7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1BvaW50LnkgPSBjb21tYW5kLnk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhZnRlciBwcm9jZXNzaW5nIHBhdGhzIGFuZCBhZGRpbmcgc29tZSByYW5kb21pemF0aW9uIGxldCdzIGFzc2lnbiBhbGwgdGhlXHJcbiAgICAgICAgLy8gbmV3IHBhdGggY29tbWFuZHMgdG8gdGhlIG9yaWdpbmFsIG90Zi5QYXRoW10gb2JqZWN0IHBhcmFtZXRlclxyXG4gICAgICAgIHByb2Nlc3NlZFRleHRQYXRoc1tjaGFyYWN0ZXJJbmRleF0uY29tbWFuZHMgPSBuZXdDaGFyYWN0ZXJQYXRoQ29tbWFuZHM7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByb2Nlc3NlZFRleHRQYXRocztcclxufSIsImltcG9ydCBwNSBmcm9tICdwNSc7XHJcbmltcG9ydCBvdGYgZnJvbSAnb3BlbnR5cGUuanMnO1xyXG5cclxuaW1wb3J0ICdAc3JjL3N0eWxlcy9za2V0Y2guY3NzJztcclxuXHJcbmltcG9ydCBsaWJyZUJhc2tlcnZpbGxlUmVnUGF0aCBmcm9tICdAc3JjL2Fzc2V0cy9mb250cy9MaWJyZV9CYXNrZXJ2aWxsZS9MaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXIudHRmJztcclxuaW1wb3J0IGxpYnJlQmFza2VydmlsbGVJdGFsaWNQYXRoIGZyb20gJ0BzcmMvYXNzZXRzL2ZvbnRzL0xpYnJlX0Jhc2tlcnZpbGxlL0xpYnJlQmFza2VydmlsbGUtSXRhbGljLnR0Zic7XHJcbmltcG9ydCBsaWJyZUJhc2tlcnZpbGxlQm9sZFBhdGggZnJvbSAnQHNyYy9hc3NldHMvZm9udHMvTGlicmVfQmFza2VydmlsbGUvTGlicmVCYXNrZXJ2aWxsZS1Cb2xkLnR0Zic7XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCAqIGFzIFA1Rm9udFJlbmRlcmVyIGZyb20gJ0BzcmMvcmVuZGVyZXJzL3A1L3JlbmRlci1mb250JztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgKiBhcyBPVEZGb250UmVuZGVyZXIgZnJvbSAnQHNyYy9yZW5kZXJlcnMvb3RmL3JlbmRlci1mb250JztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgKiBhcyBPVEZGb250UmVuZGVyU3RyYXRlZ3kgZnJvbSAnQHNyYy9yZW5kZXJlcnMvb3RmL3JlbmRlci1zdHJhdGVneSc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0ICogYXMgT1RGUGF0aFByZXByb2Nlc3NvciBmcm9tICdAc3JjL3JlbmRlcmVycy9vdGYvcGF0aC1wcmVwcm9jZXNzb3InO1xyXG5cclxuZnVuY3Rpb24gc2tldGNoKHA1OiBwNSk6IHZvaWQge1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCBsaWJyZUJhc2tlcnZpbGxlUmVnUDUgOiBwNS5Gb250O1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgbGV0IGxpYnJlQmFza2VydmlsbGVSZWdPVEYgOiBvdGYuRm9udDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCBsaWJyZUJhc2tlcnZpbGxlSXRhbGljUDUgOiBwNS5Gb250O1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgbGV0IGxpYnJlQmFza2VydmlsbGVCb2xkUDUgOiBwNS5Gb250O1xyXG5cclxuICAgIGxldCBzYW1wbGVUZXh0czogc3RyaW5nW10gPSBbXCJBcmNoYWVvcHRlcnl4XCIsIFwiVGhlIOKAnEJpZyBGaXZl4oCdXCIsIFwiRW5kLU9yZG92aWNpYW5cIiwgXCJMYXRlIERldm9uaWFuXCIsIFwiRW5kLVBlcm1pYW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJFbmQtVHJpYXNzaWNcIiwgXCJFbmQtQ3JldGFjZW91c1wiXTtcclxuXHJcbiAgICBsZXQgdGV4dDogc3RyaW5nID0gc2FtcGxlVGV4dHNbTWF0aC5yb3VuZChwNS5yYW5kb20oMCwgc2FtcGxlVGV4dHMubGVuZ3RoIC0gMSkpXTtcclxuICAgIGxldCB0eXBlU2l6ZTogbnVtYmVyID0gMTQ4O1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgbGV0IHRleHRQYXRoczogb3RmLlBhdGhbXTtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCB1bnByb2Nlc3NlZFRleHRQYXRoczogb3RmLlBhdGhbXTtcclxuXHJcbiAgICBsZXQgZXJvc2lvblN0cmVuZ3RoU2xpZGVyOiBwNS5FbGVtZW50O1xyXG4gICAgbGV0IGVyb3Npb25TdHJlbmd0aFZhbHVlVGV4dDogcDUuRWxlbWVudDtcclxuICAgIGxldCBmcmVha1RvQ3JhemluZXNzU3RyZW5ndGhTbGlkZXI6IHA1LkVsZW1lbnQ7XHJcbiAgICBsZXQgZnJlYWtUb0NyYXppbmVzc1ZhbHVlVGV4dDogcDUuRWxlbWVudDtcclxuXHJcbiAgICBmdW5jdGlvbiByZWRyYXdGb250KGltbWVkaWF0ZWx5UmVkcmF3OiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xyXG4gICAgICAgIHA1LmJhY2tncm91bmQoMjU1KTtcclxuXHJcbiAgICAgICAgaWYgKGltbWVkaWF0ZWx5UmVkcmF3KSB7IC8vIHRoaXMgY29uZGl0aW9uIGlzIGZvciB3aGVuIHRoZSB0ZXh0IGlzIHVwZGF0ZWQgKGZvciBkZWJ1Z2dpbmcpXHJcbiAgICAgICAgICAgIGxldCBwYXRoczoge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxUZXh0UGF0aDogb3RmLlBhdGhbXVxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkVGV4dFBhdGg6IG90Zi5QYXRoW11cclxuICAgICAgICAgICAgfSA9IE9URkZvbnRSZW5kZXJlci5nZXRUZXh0UGF0aHMoXHJcbiAgICAgICAgICAgICAgICBwNSxcclxuICAgICAgICAgICAgICAgIGxpYnJlQmFza2VydmlsbGVSZWdPVEYsXHJcbiAgICAgICAgICAgICAgICB0ZXh0LFxyXG4gICAgICAgICAgICAgICAgdHlwZVNpemUsXHJcbiAgICAgICAgICAgICAgICBPVEZQYXRoUHJlcHJvY2Vzc29yLmZyZWFrVG8sXHJcbiAgICAgICAgICAgICAgICB7IGNyYXppbmVzczogZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyLnZhbHVlKCkgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0ZXh0UGF0aHMgPSBwYXRocy5wcm9jZXNzZWRUZXh0UGF0aDtcclxuICAgICAgICAgICAgdW5wcm9jZXNzZWRUZXh0UGF0aHMgPSBwYXRocy5vcmlnaW5hbFRleHRQYXRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT1RGRm9udFJlbmRlcmVyLnJlbmRlckZvbnQoXHJcbiAgICAgICAgICAgIHA1LFxyXG4gICAgICAgICAgICB0ZXh0UGF0aHMsXHJcbiAgICAgICAgICAgIE9URkZvbnRSZW5kZXJTdHJhdGVneS5lcm9kZSxcclxuICAgICAgICAgICAgeyBlcm9zaW9uU3RyZW5ndGg6IC1lcm9zaW9uU3RyZW5ndGhTbGlkZXIudmFsdWUoKSB9LFxyXG4gICAgICAgICAgICB1bnByb2Nlc3NlZFRleHRQYXRoc1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFA1Rm9udFJlbmRlcmVyLnJlbmRlcihcclxuICAgICAgICAvLyAgICAgcDUsXHJcbiAgICAgICAgLy8gICAgIGxpYnJlQmFza2VydmlsbGVSZWdQNSxcclxuICAgICAgICAvLyAgICAgdGV4dCxcclxuICAgICAgICAvLyAgICAgdHlwZVNpemUsXHJcbiAgICAgICAgLy8gICAgIDAuMTMsXHJcbiAgICAgICAgLy8gICAgIFA1Rm9udFJlbmRlcmVyLnJlbmRlclN0cmF0ZWd5QmVvd3VsZlxyXG4gICAgICAgIC8vICk7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBwNSBmb250IGluaXRpYWxpemF0aW9uXHJcbiAgICBwNS5wcmVsb2FkID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGxpYnJlQmFza2VydmlsbGVSZWdQNSA9IHA1LmxvYWRGb250KGxpYnJlQmFza2VydmlsbGVSZWdQYXRoKTtcclxuICAgICAgICBsaWJyZUJhc2tlcnZpbGxlSXRhbGljUDUgPSBwNS5sb2FkRm9udChsaWJyZUJhc2tlcnZpbGxlSXRhbGljUGF0aCk7XHJcbiAgICAgICAgbGlicmVCYXNrZXJ2aWxsZUJvbGRQNSA9IHA1LmxvYWRGb250KGxpYnJlQmFza2VydmlsbGVCb2xkUGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcDUuc2V0dXAgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJhZnRlcnByaW50XCIsICgpID0+IHtcclxuICAgICAgICAgICAgcmVkcmF3Rm9udChmYWxzZSk7XHJcbiAgICAgICAgICAgIGVyb3Npb25TdHJlbmd0aFNsaWRlci52YWx1ZShwYXJzZUZsb2F0KFN0cmluZyhlcm9zaW9uU3RyZW5ndGhTbGlkZXIudmFsdWUoKSkpICsgMik7XHJcbiAgICAgICAgICAgIGVyb3Npb25TdHJlbmd0aFZhbHVlVGV4dC5odG1sKFN0cmluZyhlcm9zaW9uU3RyZW5ndGhTbGlkZXIudmFsdWUoKSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwNS5jcmVhdGVDYW52YXMocDUud2luZG93V2lkdGgsIHA1LndpbmRvd0hlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIG9wZW50eXBlLmpzIGZvbnQgaW5pdGlhbGl6YXRpb25cclxuICAgICAgICBvdGYubG9hZChsaWJyZUJhc2tlcnZpbGxlUmVnUGF0aCwgKGVycm9yLCBmb250KTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib3BlbnR5cGUuanMgfCBcIiArIGxpYnJlQmFza2VydmlsbGVSZWdQYXRoICsgXCIgY291bGQgbm90IGJlIGxvYWRlZDogXCIgKyBlcnJvcik7XHJcbiAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgaWYgKGZvbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgbGlicmVCYXNrZXJ2aWxsZVJlZ09URiA9IGZvbnQ7XHJcbiAgICAgICAgICAgICAgICAgICByZWRyYXdGb250KCk7XHJcbiAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9wZW50eXBlLmpzIHwgXCIgKyBsaWJyZUJhc2tlcnZpbGxlUmVnUGF0aCArIFwiIGxvYWRlZC5cIik7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9wZW50eXBlLmpzIHwgXCIgKyBsaWJyZUJhc2tlcnZpbGxlUmVnUGF0aCArIFwiIGNvdWxkIG5vdCBiZSBsb2FkZWQ6IGl0IHdhcyB1bmRlZmluZWRcIik7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNldHRpbmcgdXAgc2xpZGVycyBmb3IgZGVidWdnaW5nXHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyID0gcDUuY3JlYXRlU2xpZGVyKDAsIDEwLCAzLjU2LCAwLjAxKTtcclxuICAgICAgICBmcmVha1RvQ3JhemluZXNzU3RyZW5ndGhTbGlkZXIucG9zaXRpb24oNjUsIDEwKTtcclxuICAgICAgICBmcmVha1RvQ3JhemluZXNzU3RyZW5ndGhTbGlkZXIuc2l6ZSgyMDApO1xyXG4gICAgICAgIGxldCBmcmVha1RvQ3JhemluZXNzTGFiZWw6IHA1LkVsZW1lbnQgPSBwNS5jcmVhdGVQKFwiY3JhenlcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc0xhYmVsLnN0eWxlKFwicG9zaXRpb246IGFic29sdXRlXCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NMYWJlbC5zdHlsZShcImZvbnQtZmFtaWx5OiBtb25vc3BhY2VcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc0xhYmVsLnN0eWxlKFwiZm9udC13ZWlnaHQ6IGJvbGRcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc0xhYmVsLnN0eWxlKFwiZm9udC1zaXplOiAxNXB4XCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NMYWJlbC5zdHlsZShcImxlZnQ6IDEwcHhcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc0xhYmVsLnN0eWxlKFwidG9wOiAtM3B4XCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NWYWx1ZVRleHQgPSBwNS5jcmVhdGVQKFN0cmluZyhmcmVha1RvQ3JhemluZXNzU3RyZW5ndGhTbGlkZXIudmFsdWUoKSkpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NWYWx1ZVRleHQuc3R5bGUoXCJwb3NpdGlvbjogYWJzb2x1dGVcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc1ZhbHVlVGV4dC5zdHlsZShcImZvbnQtZmFtaWx5OiBtb25vc3BhY2VcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc1ZhbHVlVGV4dC5zdHlsZShcImZvbnQtc2l6ZTogMTVweFwiKTtcclxuICAgICAgICBmcmVha1RvQ3JhemluZXNzVmFsdWVUZXh0LnN0eWxlKFwibGVmdDogMjg1cHhcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc1ZhbHVlVGV4dC5zdHlsZShcInRvcDogLTNweFwiKTtcclxuICAgICAgICAoZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyIGFzIGFueSkuY2hhbmdlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZHJhd0ZvbnQoKTtcclxuICAgICAgICAgICAgZnJlYWtUb0NyYXppbmVzc1ZhbHVlVGV4dC5odG1sKFN0cmluZyhmcmVha1RvQ3JhemluZXNzU3RyZW5ndGhTbGlkZXIudmFsdWUoKSkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhmcmVha1RvQ3JhemluZXNzU3RyZW5ndGhTbGlkZXIudmFsdWUoKSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoU2xpZGVyID0gcDUuY3JlYXRlU2xpZGVyKDAsIDEwLCA0LjQ0LCAwLjAxKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhTbGlkZXIucG9zaXRpb24oNjUsIDUwKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhTbGlkZXIuc2l6ZSgyMDApO1xyXG4gICAgICAgIGxldCBlcm9zaW9uU3RyZW5ndGhMYWJlbDogcDUuRWxlbWVudCA9IHA1LmNyZWF0ZVAoXCJlcm9kZVwiKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhMYWJlbC5zdHlsZShcInBvc2l0aW9uOiBhYnNvbHV0ZVwiKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhMYWJlbC5zdHlsZShcImZvbnQtZmFtaWx5OiBtb25vc3BhY2VcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoTGFiZWwuc3R5bGUoXCJmb250LXdlaWdodDogYm9sZFwiKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhMYWJlbC5zdHlsZShcImZvbnQtc2l6ZTogMTVweFwiKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhMYWJlbC5zdHlsZShcImxlZnQ6IDEwcHhcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoTGFiZWwuc3R5bGUoXCJ0b3A6IDM3cHhcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoVmFsdWVUZXh0ID0gcDUuY3JlYXRlUChTdHJpbmcoZXJvc2lvblN0cmVuZ3RoU2xpZGVyLnZhbHVlKCkpKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhWYWx1ZVRleHQuc3R5bGUoXCJwb3NpdGlvbjogYWJzb2x1dGVcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoVmFsdWVUZXh0LnN0eWxlKFwiZm9udC1mYW1pbHk6IG1vbm9zcGFjZVwiKTtcclxuICAgICAgICBlcm9zaW9uU3RyZW5ndGhWYWx1ZVRleHQuc3R5bGUoXCJmb250LXNpemU6IDE1cHhcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoVmFsdWVUZXh0LnN0eWxlKFwibGVmdDogMjg1cHhcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoVmFsdWVUZXh0LnN0eWxlKFwidG9wOiAzN3B4XCIpO1xyXG4gICAgICAgIChlcm9zaW9uU3RyZW5ndGhTbGlkZXIgYXMgYW55KS5jaGFuZ2VkKCgpID0+IHtcclxuICAgICAgICAgICAgcmVkcmF3Rm9udChmYWxzZSk7XHJcbiAgICAgICAgICAgIGVyb3Npb25TdHJlbmd0aFZhbHVlVGV4dC5odG1sKFN0cmluZyhlcm9zaW9uU3RyZW5ndGhTbGlkZXIudmFsdWUoKSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBwNS53aW5kb3dSZXNpemVkID0gKCkgOiB2b2lkID0+IHtcclxuICAgICAgICBwNS5yZXNpemVDYW52YXMocDUud2luZG93V2lkdGgsIHA1LndpbmRvd0hlaWdodCk7XHJcblxyXG4gICAgICAgIHJlZHJhd0ZvbnQoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHA1LmtleVByZXNzZWQgPSAoKSA6IHZvaWQgPT4ge1xyXG4gICAgICAgIGxldCBuZWVkc1VwZGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAocDUua2V5Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHA1LmtleSkge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IHA1LmtleTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwNS5rZXkgPT09IFwiQmFja3NwYWNlXCIpIHtcclxuICAgICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgdGV4dC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgbmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocDUua2V5ID09PSBcIkVudGVyXCIpIHtcclxuICAgICAgICAgICAgdGV4dCArPSBcIlxcblwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocDUua2V5ID09PSBcIkFycm93VXBcIikge1xyXG4gICAgICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobmVlZHNVcGRhdGUpIHJlZHJhd0ZvbnQoKTtcclxuICAgIH1cclxufVxyXG5cclxubmV3IHA1KHNrZXRjaCk7XHJcbiIsImltcG9ydCBvdGYgZnJvbSAnb3BlbnR5cGUuanMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50ZXJDb3VudGVyKGZvbnQ6IG90Zi5Gb250LCBjaGFyYWN0ZXI6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBpZiAoY2hhcmFjdGVyLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwidHlwZS1jb3VudGVycy50cyB8IFBhdGhDb3VudGVyQ291bnRlciBhY2NlcHRlZCBhIGNoYXJhY3RlciBvZiBzaXplIFwiICsgY2hhcmFjdGVyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9udCBzaXplIGFuZCB4IGFuZCB5IGNvb3JkcyB1c2VkIGhlcmUgYXJlIGR1bW1pZXNcclxuICAgIHJldHVybiBwYXRoQ291bnRlckNvdW50ZXIoZm9udC5nZXRQYXRoKGNoYXJhY3RlclswXSwgMCwgMCwgMjApKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhDb3VudGVyQ291bnRlcihjaGFyYWN0ZXJQYXRoOiBvdGYuUGF0aCk6IG51bWJlciB7XHJcblxyXG4gICAgbGV0IGNvdW50ZXJDb3VudGVyOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGNvbW1hbmQgb2YgY2hhcmFjdGVyUGF0aC5jb21tYW5kcykge1xyXG4gICAgICAgIGlmIChjb21tYW5kLnR5cGUgPT09IFwiWlwiKSB7XHJcbiAgICAgICAgICAgIGNvdW50ZXJDb3VudGVyICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoaXMgYXNzdW1lcyB0aGF0IG90Zi5QYXRoIFNWRyBkcmF3aW5nIGNvbW1hbmRzIGFyZSBzdHJ1Y3R1cmVkIHdpdGggdGhlIGJhc2UgbGV0dGVyZm9ybSBzaGFwZVxyXG4gICAgLy8gZm9sbG93ZWQgYnkgY291bnRlcnNcclxuICAgIHJldHVybiBjb3VudGVyQ291bnRlciA9PT0gMCA/IDAgOiBjb3VudGVyQ291bnRlciAtIDE7XHJcbn1cclxuXHJcbiIsImltcG9ydCBvdGYgZnJvbSAnb3BlbnR5cGUuanMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RTaGFwZXNGcm9tUGF0aChwYXRoOiBvdGYuUGF0aCkgOiBvdGYuUGF0aENvbW1hbmRbXVtdIHtcclxuICAgIGxldCBjdXJyU2hhcGVDb3VudGVyOiBudW1iZXIgPSAwO1xyXG4gICAgbGV0IGN1cnJTaGFwZXM6IG90Zi5QYXRoQ29tbWFuZFtdW10gPSBbW11dO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmNvbW1hbmRzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBsZXQgY29tbWFuZCA9IHBhdGguY29tbWFuZHNbaV07XHJcblxyXG4gICAgICAgIGlmIChjb21tYW5kLnR5cGUgIT09IFwiWlwiKSB7IC8vIGlmIHdlIGFyZW4ndCBhdCBhIGNsb3NlIHNoYXBlIGNvbW1hbmRcclxuICAgICAgICAgICAgY3VyclNoYXBlc1tjdXJyU2hhcGVDb3VudGVyXS5wdXNoKGNvbW1hbmQpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gaWYgd2UgYXJlIGF0IGEgY2xvc2Ugc2hhcGUgY29tbWFuZFxyXG4gICAgICAgICAgICAvLyBwdXNoIFwiWlwiXHJcbiAgICAgICAgICAgIGN1cnJTaGFwZXNbY3VyclNoYXBlQ291bnRlcl0ucHVzaChjb21tYW5kKVxyXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgdGhlIGN1cnJTaGFwZUNvdW50ZXJcclxuICAgICAgICAgICAgY3VyclNoYXBlQ291bnRlcisrO1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBhcmVuJ3QgYXQgdGhlIGxhc3QgXCJaXCIgdGhlbiBrZWVwIGV4cGFuZGluZyB0aGUgbGlzdFxyXG4gICAgICAgICAgICBpZiAoaSAhPT0gcGF0aC5jb21tYW5kcy5sZW5ndGggLSAxKSBjdXJyU2hhcGVzLnB1c2goW10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3VyclNoYXBlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0U3RhcnRQb2ludEluUGF0aChwYXRoQ29tbWFuZHM6IG90Zi5QYXRoQ29tbWFuZFtdKSA6IChQb2ludCB8IG51bGwpIHtcclxuICAgIGZvciAobGV0IGNvbW1hbmQgb2YgcGF0aENvbW1hbmRzKSB7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQudHlwZSA9PT0gXCJDXCIgfHwgIC8vIGN1YmljIGJlemllclxyXG4gICAgICAgICAgICBjb21tYW5kLnR5cGUgPT09IFwiTFwiIHx8ICAvLyBsaW5lIHRvXHJcbiAgICAgICAgICAgIGNvbW1hbmQudHlwZSA9PT0gXCJRXCIpIHsgIC8vIHF1YWRyYXRpYyBiZXppZXJcclxuICAgICAgICAgICAgcmV0dXJuIHsgeDogY29tbWFuZC54LCB5OiBjb21tYW5kLnkgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXRoQ29tbWFuZHNUb1BhdGhEYXRhKHBhdGhDb21tYW5kczogb3RmLlBhdGhDb21tYW5kW10sIGRlY2ltYWxQbGFjZXM6IG51bWJlcikgOiBzdHJpbmcge1xyXG4gICAgbGV0IHBhdGhEYXRhOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIGZvciAobGV0IGNvbW1hbmQgb2YgcGF0aENvbW1hbmRzKSB7XHJcbiAgICAgICAgLy8gXCJaXCIgaXMgYXBwZW5kZWQgYXV0b21hdGljYWxseSBoZXJlXHJcbiAgICAgICAgcGF0aERhdGEgKz0gY29tbWFuZC50eXBlICsgXCIgXCI7XHJcbiAgICAgICAgc3dpdGNoIChjb21tYW5kLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcIk1cIjpcclxuICAgICAgICAgICAgY2FzZSBcIkxcIjpcclxuICAgICAgICAgICAgICAgIHBhdGhEYXRhICs9IGNvbW1hbmQueC50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpICsgXCIsXCIgKyBjb21tYW5kLnkudG9GaXhlZChkZWNpbWFsUGxhY2VzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiQ1wiOlxyXG4gICAgICAgICAgICAgICAgcGF0aERhdGEgKz0gY29tbWFuZC54MS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpICsgXCIsXCIgKyBjb21tYW5kLnkxLnRvRml4ZWQoZGVjaW1hbFBsYWNlcykgKyBcIiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC54Mi50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpICsgXCIsXCIgKyBjb21tYW5kLnkyLnRvRml4ZWQoZGVjaW1hbFBsYWNlcykgKyBcIiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZC54LnRvRml4ZWQoZGVjaW1hbFBsYWNlcykgKyBcIixcIiArIGNvbW1hbmQueS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJRXCI6XHJcbiAgICAgICAgICAgICAgICBwYXRoRGF0YSArPSBjb21tYW5kLngxLnRvRml4ZWQoZGVjaW1hbFBsYWNlcykgKyBcIixcIiArIGNvbW1hbmQueTEudG9GaXhlZChkZWNpbWFsUGxhY2VzKSArIFwiIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLngudG9GaXhlZChkZWNpbWFsUGxhY2VzKSArIFwiLFwiICsgY29tbWFuZC55LnRvRml4ZWQoZGVjaW1hbFBsYWNlcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhdGhEYXRhO1xyXG59IiwiaW1wb3J0IHA1IGZyb20gJ3A1JztcclxuaW1wb3J0IG90ZiBmcm9tICdvcGVudHlwZS5qcyc7XHJcbmltcG9ydCB7cGF0aENvdW50ZXJDb3VudGVyfSBmcm9tIFwiLi91dGlsL3R5cGUtY291bnRlcnNcIjtcclxuaW1wb3J0IHtleHRyYWN0U2hhcGVzRnJvbVBhdGgsIGdldEZpcnN0U3RhcnRQb2ludEluUGF0aCwgcGF0aENvbW1hbmRzVG9QYXRoRGF0YX0gZnJvbSBcIi4vdXRpbC9vdGYtcGF0aC11dGlsc1wiO1xyXG5cclxudHlwZSBGb250UmVuZGVyU3RyYXRlZ3kgPSAocDU6IHA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UGF0aHM6IG90Zi5QYXRoW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRGaWxsU3RhdHVzZXM6IEZpbGxTdGF0dXNbXVtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4gdm9pZDtcclxudHlwZSBGb250UHJlcHJvY2Vzc29yID0gKHA1OiBwNSwgdGV4dFBhdGhzOiBvdGYuUGF0aFtdLCBvcHRpb25zPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4gb3RmLlBhdGhbXTtcclxuXHJcbmV4cG9ydCBlbnVtIEZpbGxTdGF0dXMge1xyXG4gICAgRklMTEVEID0gXCJmaWxsZWRcIixcclxuICAgIE9QRU4gPSBcIm9wZW5cIlxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdGV4dEZvcmVncm91bmRDb2xvdXIgPSAwO1xyXG5leHBvcnQgY29uc3QgdGV4dEJhY2tncm91bmRDb2xvdXIgPSAyNTU7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dFBhdGhzKHA1OiBwNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiBvdGYuRm9udCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZVNpemU6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250UHJlcHJvY2Vzc29yOiBGb250UHJlcHJvY2Vzc29yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRQcmVwcm9jZXNzb3JPcHRpb25zPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6XHJcbiAgICB7IG9yaWdpbmFsVGV4dFBhdGg6IG90Zi5QYXRoW10sIHByb2Nlc3NlZFRleHRQYXRoOiBvdGYuUGF0aFtdIH0ge1xyXG4gICAgY29uc3QgdGV4dFBhdGg6IG90Zi5QYXRoID0gZm9udC5nZXRQYXRoKHRleHQsIDAsIDAsIHR5cGVTaXplLCB7IGtlcm5pbmc6IHRydWUgfSk7XHJcbiAgICBjb25zdCB0ZXh0Qm91bmRpbmdCb3g6IG90Zi5Cb3VuZGluZ0JveCA9IHRleHRQYXRoLmdldEJvdW5kaW5nQm94KCk7XHJcbiAgICBjb25zdCB0ZXh0SGVpZ2h0OiBudW1iZXIgPSB0ZXh0Qm91bmRpbmdCb3gueTIgLSB0ZXh0Qm91bmRpbmdCb3gueTE7XHJcbiAgICBjb25zdCB0ZXh0V2lkdGg6IG51bWJlciA9IHRleHRCb3VuZGluZ0JveC54MiAtIHRleHRCb3VuZGluZ0JveC54MTtcclxuXHJcbiAgICBsZXQgdGV4dFBhdGhzOiBvdGYuUGF0aFtdID0gZm9udC5nZXRQYXRocyhcclxuICAgICAgICB0ZXh0LFxyXG4gICAgICAgIChwNS53aW5kb3dXaWR0aCAtIHRleHRXaWR0aCkgLyAyLFxyXG4gICAgICAgIChwNS53aW5kb3dIZWlnaHQgLSB0ZXh0SGVpZ2h0ICsgdHlwZVNpemUpIC8gMixcclxuICAgICAgICB0eXBlU2l6ZSxcclxuICAgICAgICB7IGtlcm5pbmc6IHRydWUgfVxyXG4gICAgKTtcclxuXHJcbiAgICBsZXQgcHJvY2Vzc2VkVGV4dFBhdGhzOiBvdGYuUGF0aFtdID0gZm9udFByZXByb2Nlc3NvcihwNSwgdGV4dFBhdGhzLCBmb250UHJlcHJvY2Vzc29yT3B0aW9ucyk7XHJcblxyXG4gICAgaWYgKHRleHRQYXRocy5sZW5ndGggIT09IHByb2Nlc3NlZFRleHRQYXRocy5sZW5ndGgpXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcInJlbmRlci1mb250LnRzIHwgc29tZXRoaW5nIGhhcyBnb25lIHdyb25nIGluIG90ZlxccmVuZGVyLWZvbnQudHMjZ2V0VGV4dFBhdGhzXCIgK1xyXG4gICAgICAgICAgICBcIiByZWdhcmRpbmcgdGhlIGxlbmd0aHMgb2YgdGhlIG91dHB1dHRlZCBvdGYuUGF0aFtdXCIpO1xyXG5cclxuICAgIHJldHVybiB7IG9yaWdpbmFsVGV4dFBhdGg6IHRleHRQYXRocywgcHJvY2Vzc2VkVGV4dFBhdGg6IHByb2Nlc3NlZFRleHRQYXRocyB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRm9udChwNTogcDUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRQYXRoczogb3RmLlBhdGhbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFJlbmRlcmVyOiBGb250UmVuZGVyU3RyYXRlZ3ksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRSZW5kZXJlck9wdGlvbnM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB1bnByb2Nlc3NlZFRleHRQYXRocz86IG90Zi5QYXRoW10pIDogb3RmLlBhdGhbXSB7XHJcblxyXG4gICAgLy8gc29ydGluZyBvdXQgcmVuZGVyaW5nIGhvbGVzIGluIGZvbnRzXHJcbiAgICAvLyB1bnByb2Nlc3NlZFRleHRQYXRocyBjYW4gYmUgdXNlZCBoZXJlIGlmIHRoZSBwcm9jZXNzaW5nIHlvdSBkbyBvbiB5b3VyIHRleHQgaXMgc28gZXh0cmVtZSB0aGF0IGl0IGRlc3Ryb3lzXHJcbiAgICAvLyBteSB2ZXJ5IGZpY2tsZSBhbGdvcml0aG0gZm9yIGRldGVybWluaW5nIHRoZSBudW1iZXIgYW5kIG9yZGVyIG9mIGhvbGVzIGluIGEgbGV0dGVyZm9ybSA6KVxyXG4gICAgY29uc3QgdGV4dEZpbGxTdGF0dXNlczogRmlsbFN0YXR1c1tdW10gPSB1bnByb2Nlc3NlZFRleHRQYXRocyA9PT0gdW5kZWZpbmVkID9cclxuICAgICAgICBnZXRUZXh0RmlsbFN0YXR1c2VzKHA1LCB0ZXh0UGF0aHMpIDogZ2V0VGV4dEZpbGxTdGF0dXNlcyhwNSwgdW5wcm9jZXNzZWRUZXh0UGF0aHMpO1xyXG5cclxuICAgIC8vIHVucHJvY2Vzc2VkVGV4dFBhdGhzIHRlbmQgdG8gYmUgdXNlZnVsIGluIEZvbnRSZW5kZXJTdHJhdGVneSBhcyB0aGV5IHByZXNlcnZlIHRoZSBvcmlnaW5hbCBnZW9tZXRyeVxyXG4gICAgLy8gYW5kIGN1cnZlcyBvZiB0aGUgZm9udCBiZWZvcmUgdGhleSBhcmUgcHJvY2Vzc2VkIGNyYXppbHlcclxuICAgIGlmIChmb250UmVuZGVyZXJPcHRpb25zICE9PSB1bmRlZmluZWQgJiYgdW5wcm9jZXNzZWRUZXh0UGF0aHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGZvbnRSZW5kZXJlck9wdGlvbnNbXCJ1bnByb2Nlc3NlZFRleHRQYXRoc1wiXSA9IHVucHJvY2Vzc2VkVGV4dFBhdGhzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGFjdHVhbGx5IHJlbmRlcmluZyBmb250XHJcbiAgICBmb250UmVuZGVyZXIocDUsIHRleHRQYXRocywgdGV4dEZpbGxTdGF0dXNlcywgZm9udFJlbmRlcmVyT3B0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIHRleHRQYXRocztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVTYW1wbGVPZmZzZXRHcmlkKHNpZGVMZW5ndGg6IG51bWJlciwgc2FtcGxlVW5pdDogbnVtYmVyKTogW3g6IG51bWJlciwgeTogbnVtYmVyXVtdIHtcclxuICAgIGlmIChzaWRlTGVuZ3RoICUgMiA9PT0gMCApIHtcclxuICAgICAgICBzaWRlTGVuZ3RoICs9IDE7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgXCJyZW5kZXItZm9udC1vdGYudHMgfCBnZW5lcmF0ZVNhbXBsZU9mZnNldEdyaWQgcmVjZWl2ZWQgYW4gZXZlbiBzaWRlIGxlbmd0aCBvZiBcIiArIChzaWRlTGVuZ3RoIC0gMSlcclxuICAgICAgICAgICAgKyBcIi4gVGhlIGFjdHVhbCBzaWRlIGxlbmd0aCBvZiB0aGUgZ3JpZCBnZW5lcmF0ZWQgd2lsbCBiZSBvZGQ6IFwiICsgc2lkZUxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNhbXBsZU9mZnNldEdyaWQ6IFt4OiBudW1iZXIsIHk6IG51bWJlcl1bXSA9IFtdO1xyXG4gICAgbGV0IG1heFNhbXBsZVVuaXRTY2FsZTogbnVtYmVyID0gTWF0aC5mbG9vcihzaWRlTGVuZ3RoIC8gMik7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IG1heFNhbXBsZVVuaXRTY2FsZTsgaSA+PSAtbWF4U2FtcGxlVW5pdFNjYWxlOyBpLS0pIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gLW1heFNhbXBsZVVuaXRTY2FsZTsgaiA8PSBtYXhTYW1wbGVVbml0U2NhbGU7IGorKykge1xyXG4gICAgICAgICAgICBzYW1wbGVPZmZzZXRHcmlkLnB1c2goW2ogKiBzYW1wbGVVbml0LCAtaSAqIHNhbXBsZVVuaXRdKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2FtcGxlT2Zmc2V0R3JpZDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGV4dEZpbGxTdGF0dXNlcyhwNTogcDUsIHRleHRQYXRoczogb3RmLlBhdGhbXSk6IEZpbGxTdGF0dXNbXVtdIHtcclxuICAgIGNvbnN0IHRvUGF0aERhdGFSZXNvbHV0aW9uOiBudW1iZXIgPSAzO1xyXG4gICAgY29uc3Qgc2FtcGxlVW5pdDogbnVtYmVyID0gMjtcclxuICAgIGNvbnN0IHNhbXBsZU9mZnNldEtlcm5lbDogW3g6IG51bWJlciwgeTogbnVtYmVyXVtdID0gZ2VuZXJhdGVTYW1wbGVPZmZzZXRHcmlkKDUsIHNhbXBsZVVuaXQpO1xyXG4gICAgY29uc3QgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBwNS5kcmF3aW5nQ29udGV4dDtcclxuXHJcbiAgICBsZXQgdGV4dEZpbGxTdGF0dXNlczogRmlsbFN0YXR1c1tdW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBjaGFyYWN0ZXJJbmRleCA9IDA7IGNoYXJhY3RlckluZGV4IDwgdGV4dFBhdGhzLmxlbmd0aDsgY2hhcmFjdGVySW5kZXgrKyl7XHJcbiAgICAgICAgY29uc3QgZW50aXJlTGV0dGVyZm9ybVBhdGggPSB0ZXh0UGF0aHNbY2hhcmFjdGVySW5kZXhdO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ZXJDb3VudDogbnVtYmVyID0gcGF0aENvdW50ZXJDb3VudGVyKGVudGlyZUxldHRlcmZvcm1QYXRoKTtcclxuXHJcbiAgICAgICAgdGV4dEZpbGxTdGF0dXNlcy5wdXNoKFtdKTtcclxuXHJcbiAgICAgICAgaWYgKGNvdW50ZXJDb3VudCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRleHRGaWxsU3RhdHVzZXNbY2hhcmFjdGVySW5kZXhdLnB1c2goRmlsbFN0YXR1cy5GSUxMRUQpO1xyXG4gICAgICAgICAgICBjb250aW51ZTsgLy8gd2lsbCBpbmNyZW1lbnQgY2hhcmFjdGVySW5kZXhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsZXR0ZXJmb3JtQ29tcG9uZW50U2hhcGVzOiBvdGYuUGF0aENvbW1hbmRbXVtdID0gZXh0cmFjdFNoYXBlc0Zyb21QYXRoKGVudGlyZUxldHRlcmZvcm1QYXRoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbGV0dGVyZm9ybUNvbXBvbmVudFNoYXBlIG9mIGxldHRlcmZvcm1Db21wb25lbnRTaGFwZXMpIHtcclxuICAgICAgICAgICAgbGV0IHNhbXBsZVBvaW50OiBQb2ludCB8IG51bGwgPSBnZXRGaXJzdFN0YXJ0UG9pbnRJblBhdGgobGV0dGVyZm9ybUNvbXBvbmVudFNoYXBlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzYW1wbGVQb2ludCA9PT0gbnVsbCB8fCBzYW1wbGVQb2ludCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicmVuZGVyLWZvbnQtb3RmLnRzIHwgc2FtcGxlUG9pbnQueCBhbmQgc2FtcGxlUG9pbnQueSB3YXMgbnVsbFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBub3cgd2UgbmVlZCB0byBzYW1wbGUgYXJvdW5kIHRoZSAoc2FtcGxlWCwgc2FtcGxlWSkgY29vcmRpbmF0ZSB3ZSBoYXZlIGFuZCB0ZXN0IGFnYWluc3RcclxuICAgICAgICAgICAgLy8gY3R4LmlzUG9pbnRJblBhdGggd2l0aCB0aGUgcmVsZXZhbnQgZW50aXJlTGV0dGVyZm9ybVBhdGggYXMgdGhlIHBhdGhcclxuICAgICAgICAgICAgbGV0IHNhbXBsZVBvaW50T2Zmc2V0OiBQb2ludCA9IHt4OiBzYW1wbGVQb2ludC54LCB5OiBzYW1wbGVQb2ludC55fTtcclxuICAgICAgICAgICAgbGV0IHdhc0ZpbGxTdGF0dXNBc3NpZ25lZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgc2FtcGxlT2Zmc2V0IG9mIHNhbXBsZU9mZnNldEtlcm5lbCkge1xyXG4gICAgICAgICAgICAgICAgc2FtcGxlUG9pbnRPZmZzZXQueCA9IHNhbXBsZVBvaW50LnggKyBzYW1wbGVPZmZzZXRbMF07XHJcbiAgICAgICAgICAgICAgICBzYW1wbGVQb2ludE9mZnNldC55ID0gc2FtcGxlUG9pbnQueSArIHNhbXBsZU9mZnNldFsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTZWFyY2hpbmcgdG8gc2VlIGlmIHdlJ3JlIGluc2lkZSB0aGUgY3VycmVudCBzaGFwZVxyXG4gICAgICAgICAgICAgICAgLy8gVGhlIHA1LnBpeGVsRGVuc2l0eSgpIHBhcnQgaXMgQ1JVQ0lBTCFcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlclBhdGgyRDogUGF0aDJEID1cclxuICAgICAgICAgICAgICAgICAgICBuZXcgUGF0aDJEKHBhdGhDb21tYW5kc1RvUGF0aERhdGEobGV0dGVyZm9ybUNvbXBvbmVudFNoYXBlLCB0b1BhdGhEYXRhUmVzb2x1dGlvbikpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNJblBhdGg6IGJvb2xlYW4gPSBjdHguaXNQb2ludEluUGF0aChcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJQYXRoMkQsXHJcbiAgICAgICAgICAgICAgICAgICAgcDUucGl4ZWxEZW5zaXR5KCkgKiBzYW1wbGVQb2ludE9mZnNldC54LFxyXG4gICAgICAgICAgICAgICAgICAgIHA1LnBpeGVsRGVuc2l0eSgpICogc2FtcGxlUG9pbnRPZmZzZXQueSxcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNJblN0cm9rZTogYm9vbGVhbiA9IGN0eC5pc1BvaW50SW5TdHJva2UoXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyUGF0aDJELFxyXG4gICAgICAgICAgICAgICAgICAgIHA1LnBpeGVsRGVuc2l0eSgpICogc2FtcGxlUG9pbnRPZmZzZXQueCxcclxuICAgICAgICAgICAgICAgICAgICBwNS5waXhlbERlbnNpdHkoKSAqIHNhbXBsZVBvaW50T2Zmc2V0LnksXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN0b3Agc2VhcmNoaW5nIGlmIHdlJ3ZlIGZvdW5kIGEgcG9pbnQgd2l0aGluIHRoZSBwYXRoIGFuZCBub3Qgb24gdGhlIHN0cm9rZSBhcyB0aGlzIHdvbid0XHJcbiAgICAgICAgICAgICAgICAvLyBzaG93IHVwIGluIGZ1dHVyZSBpc1BvaW50SW5QYXRoIGNhbGN1bGF0aW9ucyB3aXRoIHRoZSBlbnRpcmUgbGV0dGVyZm9ybVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzSW5QYXRoICYmICFpc0luU3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FzRmlsbFN0YXR1c0Fzc2lnbmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJhY3RlclNoYXBlUGF0aDJEOiBQYXRoMkQgPSBuZXcgUGF0aDJEKGVudGlyZUxldHRlcmZvcm1QYXRoLnRvUGF0aERhdGEodG9QYXRoRGF0YVJlc29sdXRpb24pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBzYW1wbGUgdGhpcyBwb2ludCBpbiB0aGUgdGV4dFBhdGggdXNpbmcgY3R4LmlzUG9pbnRJblBhdGhcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0luUGF0aDogYm9vbGVhbiA9IGN0eC5pc1BvaW50SW5QYXRoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJTaGFwZVBhdGgyRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDUucGl4ZWxEZW5zaXR5KCkgKiBzYW1wbGVQb2ludE9mZnNldC54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwNS5waXhlbERlbnNpdHkoKSAqIHNhbXBsZVBvaW50T2Zmc2V0LnksXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNJblN0cm9rZTogYm9vbGVhbiA9IGN0eC5pc1BvaW50SW5TdHJva2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlclNoYXBlUGF0aDJELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwNS5waXhlbERlbnNpdHkoKSAqIHNhbXBsZVBvaW50T2Zmc2V0LngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHA1LnBpeGVsRGVuc2l0eSgpICogc2FtcGxlUG9pbnRPZmZzZXQueSxcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBvbmx5IE5PVCBpbiBhIGNvdW50ZXIvc29tZXRoaW5nIHRoYXQgc2hvdWxkbid0IGJlIGZpbGxlZCB3aGVuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXNJblBhdGggPT09IEZBTFNFICYmIGlzSW5TdHJva2UgPT09IEZBTFNFO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0luUGF0aCB8fCBpc0luU3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRGaWxsU3RhdHVzZXNbY2hhcmFjdGVySW5kZXhdLnB1c2goRmlsbFN0YXR1cy5GSUxMRUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRGaWxsU3RhdHVzZXNbY2hhcmFjdGVySW5kZXhdLnB1c2goRmlsbFN0YXR1cy5PUEVOKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPIG5lZWQgdG8gZG8gZXJyb3IgaGFuZGxpbmcgZm9yIHdoYXQgaGFwcGVucyB3aGVuIHdlIGZhbGwgdGhyb3VnaCBoZXJlIHdpdGhvdXQgYSBzdGF0dXNcclxuICAgICAgICAgICAgaWYgKCF3YXNGaWxsU3RhdHVzQXNzaWduZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRleHRGaWxsU3RhdHVzZXNbY2hhcmFjdGVySW5kZXhdLnB1c2goRmlsbFN0YXR1cy5GSUxMRUQpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInJlbmRlci1mb250LW90Zi50cyB8IGdldFRleHRGaWxsU3RhdHVzZXMgY291bGQgbm90IGZpbmQgYSBzdWl0YWJsZSBzYW1wbGUgcG9pbnQgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiKGF0IGNoYXJhY3RlciBpbmRleCBcIiArIGNoYXJhY3RlckluZGV4ICsgXCIpIGZvciBjYWxjdWxhdGluZyB0ZXh0IGZpbGwgc3RhdHVzXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRleHRGaWxsU3RhdHVzZXM7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCBwNSBmcm9tICdwNSc7XHJcbmltcG9ydCBvdGYgZnJvbSAnb3BlbnR5cGUuanMnO1xyXG5pbXBvcnQgeyBGaWxsU3RhdHVzLCB0ZXh0QmFja2dyb3VuZENvbG91ciwgdGV4dEZvcmVncm91bmRDb2xvdXIgfSBmcm9tIFwiLi9yZW5kZXItZm9udFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxlZChwNTogcDUsIHRleHRQYXRoczogb3RmLlBhdGhbXSwgdGV4dEZpbGxTdGF0dXNlczogRmlsbFN0YXR1c1tdW10pIHtcclxuXHJcbiAgICBwNS5wdXNoKCk7XHJcbiAgICBwNS5ub1N0cm9rZSgpO1xyXG4gICAgZm9yIChsZXQgY2hhcmFjdGVySW5kZXggPSAwOyBjaGFyYWN0ZXJJbmRleCA8IHRleHRQYXRocy5sZW5ndGg7IGNoYXJhY3RlckluZGV4Kyspe1xyXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclBhdGg6IG90Zi5QYXRoID0gdGV4dFBhdGhzW2NoYXJhY3RlckluZGV4XTtcclxuICAgICAgICBjb25zdCBjaGFyYWN0ZXJGaWxsU3RhdHVzOiBGaWxsU3RhdHVzW10gPSB0ZXh0RmlsbFN0YXR1c2VzW2NoYXJhY3RlckluZGV4XTtcclxuICAgICAgICBsZXQgdGV4dEZpbGxTdGF0dXNDb3VudGVyOiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICBpZiAoY2hhcmFjdGVyRmlsbFN0YXR1c1t0ZXh0RmlsbFN0YXR1c0NvdW50ZXJdID09PSBGaWxsU3RhdHVzLkZJTExFRCkge1xyXG4gICAgICAgICAgICBwNS5maWxsKHRleHRGb3JlZ3JvdW5kQ29sb3VyKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlckZpbGxTdGF0dXNbdGV4dEZpbGxTdGF0dXNDb3VudGVyXSA9PT0gRmlsbFN0YXR1cy5PUEVOKSB7XHJcbiAgICAgICAgICAgIHA1LmZpbGwodGV4dEJhY2tncm91bmRDb2xvdXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgY29tbWFuZCBvZiBjaGFyYWN0ZXJQYXRoLmNvbW1hbmRzKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY29tbWFuZC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHA1LmJlZ2luU2hhcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBwNS52ZXJ0ZXgoY29tbWFuZC54LCBjb21tYW5kLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxcIjpcclxuICAgICAgICAgICAgICAgICAgICBwNS52ZXJ0ZXgoY29tbWFuZC54LCBjb21tYW5kLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkNcIjpcclxuICAgICAgICAgICAgICAgICAgICBwNS5iZXppZXJWZXJ0ZXgoY29tbWFuZC54MSwgY29tbWFuZC55MSwgY29tbWFuZC54MiwgY29tbWFuZC55MiwgY29tbWFuZC54LCBjb21tYW5kLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlFcIjpcclxuICAgICAgICAgICAgICAgICAgICBwNS5xdWFkcmF0aWNWZXJ0ZXgoY29tbWFuZC54MSwgY29tbWFuZC55MSwgY29tbWFuZC54LCBjb21tYW5kLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlpcIjpcclxuICAgICAgICAgICAgICAgICAgICBwNS5lbmRTaGFwZShwNS5DTE9TRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEZpbGxTdGF0dXNDb3VudGVyKys7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJhY3RlckZpbGxTdGF0dXNbdGV4dEZpbGxTdGF0dXNDb3VudGVyXSA9PT0gRmlsbFN0YXR1cy5GSUxMRUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDUuZmlsbCh0ZXh0Rm9yZWdyb3VuZENvbG91cik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXJGaWxsU3RhdHVzW3RleHRGaWxsU3RhdHVzQ291bnRlcl0gPT09IEZpbGxTdGF0dXMuT1BFTikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwNS5maWxsKHRleHRCYWNrZ3JvdW5kQ29sb3VyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwNS5wb3AoKTtcclxufVxyXG5cclxuLy8gb3B0aW9ucyBsb29rcyBsaWtlXHJcbmV4cG9ydCBmdW5jdGlvbiBlcm9kZShwNTogcDUsXHJcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0UGF0aHM6IG90Zi5QYXRoW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0RmlsbFN0YXR1c2VzOiBGaWxsU3RhdHVzW11bXSxcclxuICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcblxyXG4gICAgLy8gbnVkZ2UgZmFjdG9yIG9mIDctOC4zIGlzIGlkZWFsIGZvciBhIGxldHRlcmZvcm0gdGhhdCBpcyBhbG1vc3Qgbm9uLWV4aXN0ZW50XHJcbiAgICBsZXQgbnVkZ2VGYWN0b3I6IG51bWJlcjsgLy8tNy42Oy8vLTguMztcclxuICAgIGxldCB1bnByb2Nlc3NlZFRleHRQYXRoczogb3RmLlBhdGhbXTtcclxuXHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8ICEoXCJlcm9zaW9uU3RyZW5ndGhcIiBpbiBvcHRpb25zKSB8fCAhKFwidW5wcm9jZXNzZWRUZXh0UGF0aHNcIiBpbiBvcHRpb25zKSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJyZW5kZXItc3RyYXRlZ3kudHMgfCBmcmVha1RvRXJvZGVkIHJlY2VpdmVkIG1hbGZvcm1lZCBvcHRpb25zIHBhcmFtZXRlci5cIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBudWRnZUZhY3RvciA9IG9wdGlvbnNbXCJlcm9zaW9uU3RyZW5ndGhcIl07XHJcbiAgICAgICAgdW5wcm9jZXNzZWRUZXh0UGF0aHMgPSBvcHRpb25zW1widW5wcm9jZXNzZWRUZXh0UGF0aHNcIl07XHJcbiAgICB9XHJcblxyXG4gICAgcDUucHVzaCgpO1xyXG4gICAgcDUubm9TdHJva2UoKTtcclxuICAgIGZvciAobGV0IGNoYXJhY3RlckluZGV4ID0gMDsgY2hhcmFjdGVySW5kZXggPCB0ZXh0UGF0aHMubGVuZ3RoOyBjaGFyYWN0ZXJJbmRleCsrKXtcclxuICAgICAgICBjb25zdCBjaGFyYWN0ZXJQYXRoOiBvdGYuUGF0aCA9IHRleHRQYXRoc1tjaGFyYWN0ZXJJbmRleF07XHJcbiAgICAgICAgY29uc3QgdW5wcm9jZXNzZWRDaGFyYWN0ZXJQYXRoOiBvdGYuUGF0aCA9IHVucHJvY2Vzc2VkVGV4dFBhdGhzW2NoYXJhY3RlckluZGV4XTtcclxuICAgICAgICBjb25zdCBjaGFyYWN0ZXJGaWxsU3RhdHVzOiBGaWxsU3RhdHVzW10gPSB0ZXh0RmlsbFN0YXR1c2VzW2NoYXJhY3RlckluZGV4XTtcclxuICAgICAgICBsZXQgdGV4dEZpbGxTdGF0dXNDb3VudGVyOiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICBpZiAoY2hhcmFjdGVyRmlsbFN0YXR1c1t0ZXh0RmlsbFN0YXR1c0NvdW50ZXJdID09PSBGaWxsU3RhdHVzLkZJTExFRCkge1xyXG4gICAgICAgICAgICBwNS5maWxsKHRleHRGb3JlZ3JvdW5kQ29sb3VyKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlckZpbGxTdGF0dXNbdGV4dEZpbGxTdGF0dXNDb3VudGVyXSA9PT0gRmlsbFN0YXR1cy5PUEVOKSB7XHJcbiAgICAgICAgICAgIHA1LmZpbGwodGV4dEJhY2tncm91bmRDb2xvdXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHByZXZpb3VzUG9pbnQ6IFBvaW50ID0geyB4OiAwLCB5OiAwIH07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcmFjdGVyUGF0aC5jb21tYW5kcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCBjb21tYW5kOiBvdGYuUGF0aENvbW1hbmQgPSBjaGFyYWN0ZXJQYXRoLmNvbW1hbmRzW2ldO1xyXG4gICAgICAgICAgICBsZXQgdW5wcm9jZXNzZWRDb21tYW5kOiBvdGYuUGF0aENvbW1hbmQgPSB1bnByb2Nlc3NlZENoYXJhY3RlclBhdGguY29tbWFuZHNbaV07XHJcblxyXG4gICAgICAgICAgICBsZXQgZHg6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IGR5OiBudW1iZXI7XHJcbiAgICAgICAgICAgIGxldCBtYWduaXR1ZGU6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IG9mZnNldFg6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IG9mZnNldFk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kLnR5cGUgIT09IHVucHJvY2Vzc2VkQ29tbWFuZC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicmVuZGVyLXN0cmF0ZWd5LnRzIHwgc29tZXRoaW5nIGhhcyBnb25lIHdyb25nIGluIG90ZlxccmVuZGVyLWZvbnQudHMjZ2V0VGV4dFBhdGhzXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiIHJlZ2FyZGluZyB0aGUgbGVuZ3RocyBvZiB0aGUgb3V0cHV0dGVkIG90Zi5QYXRoW11cIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kLnR5cGUgPT09IFwiTVwiICYmIHVucHJvY2Vzc2VkQ29tbWFuZC50eXBlID09PSBcIk1cIikge1xyXG4gICAgICAgICAgICAgICAgcDUuYmVnaW5TaGFwZSgpO1xyXG4gICAgICAgICAgICAgICAgZHggPSB1bnByb2Nlc3NlZENvbW1hbmQueSAtIHByZXZpb3VzUG9pbnQueTtcclxuICAgICAgICAgICAgICAgIGR5ID0gcHJldmlvdXNQb2ludC54IC0gdW5wcm9jZXNzZWRDb21tYW5kLng7XHJcbiAgICAgICAgICAgICAgICBtYWduaXR1ZGUgPSBNYXRoLnNxcnQoZHggKiogMiArIGR5ICoqIDIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WCA9IChkeCAvIG1hZ25pdHVkZSkgKiBudWRnZUZhY3RvcjtcclxuICAgICAgICAgICAgICAgIG9mZnNldFkgPSAoZHkgLyBtYWduaXR1ZGUpICogbnVkZ2VGYWN0b3I7XHJcbiAgICAgICAgICAgICAgICBwNS52ZXJ0ZXgoXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC54ICsgb2Zmc2V0WCxcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnkgKyBvZmZzZXRZXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUG9pbnQueCA9IHVucHJvY2Vzc2VkQ29tbWFuZC54O1xyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNQb2ludC55ID0gdW5wcm9jZXNzZWRDb21tYW5kLnk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tbWFuZC50eXBlID09PSBcIkxcIiAmJiB1bnByb2Nlc3NlZENvbW1hbmQudHlwZSA9PT0gXCJMXCIpIHtcclxuICAgICAgICAgICAgICAgIGR4ID0gdW5wcm9jZXNzZWRDb21tYW5kLnkgLSBwcmV2aW91c1BvaW50Lnk7XHJcbiAgICAgICAgICAgICAgICBkeSA9IHByZXZpb3VzUG9pbnQueCAtIHVucHJvY2Vzc2VkQ29tbWFuZC54O1xyXG4gICAgICAgICAgICAgICAgbWFnbml0dWRlID0gTWF0aC5zcXJ0KGR4ICoqIDIgKyBkeSAqKiAyKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldFggPSAoZHggLyBtYWduaXR1ZGUpICogbnVkZ2VGYWN0b3IvMS41O1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WSA9IChkeSAvIG1hZ25pdHVkZSkgKiBudWRnZUZhY3Rvci8xLjU7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyB0aGlzIG1ha2VzIGZvbnQgb3V0bGluZXMgc3Bpa3kgYW5kIG5vdCB0aGluIHdoaWNoIGlzIGJhZFxyXG4gICAgICAgICAgICAgICAgcDUudmVydGV4KFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQueCArIG9mZnNldFgsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC55ICsgb2Zmc2V0WVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgcHJldmlvdXMgcG9pbnQgY29uc2lzdGVudGx5XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1BvaW50LnggPSB1bnByb2Nlc3NlZENvbW1hbmQueDtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUG9pbnQueSA9IHVucHJvY2Vzc2VkQ29tbWFuZC55O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmQudHlwZSA9PT0gXCJDXCIgJiYgdW5wcm9jZXNzZWRDb21tYW5kLnR5cGUgPT09IFwiQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicmVuZGVyLXN0cmF0ZWd5LnRzIHwgYSBjdWJpYyBiZXppZXIgd2FzIGRyYXduISBUaGlzIGlzIHJlYWxseSBiYWQuXCIpXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIGkgaGF2ZW4ndCBzZWVuIGEgc2luZ2xlIGN1cnZlIGludm9rZSB0aGlzLCBzbyBJJ3ZlIGp1c3QgaWdub3JlZCB0aGlzXHJcbiAgICAgICAgICAgICAgICBwNS5iZXppZXJWZXJ0ZXgoXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC54MSxcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC55MixcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLngsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC55XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUG9pbnQueCA9IHVucHJvY2Vzc2VkQ29tbWFuZC54O1xyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNQb2ludC55ID0gdW5wcm9jZXNzZWRDb21tYW5kLnk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tbWFuZC50eXBlID09PSBcIlFcIiAmJiB1bnByb2Nlc3NlZENvbW1hbmQudHlwZSA9PT0gXCJRXCIpIHtcclxuICAgICAgICAgICAgICAgIGR4ID0gdW5wcm9jZXNzZWRDb21tYW5kLnkgLSB1bnByb2Nlc3NlZENvbW1hbmQueTE7XHJcbiAgICAgICAgICAgICAgICBkeSA9IHVucHJvY2Vzc2VkQ29tbWFuZC54MSAtIHVucHJvY2Vzc2VkQ29tbWFuZC54O1xyXG4gICAgICAgICAgICAgICAgbWFnbml0dWRlID0gTWF0aC5zcXJ0KGR4ICoqIDIgKyBkeSAqKiAyKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldFggPSAoZHggLyBtYWduaXR1ZGUpICogbnVkZ2VGYWN0b3I7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXRZID0gKGR5IC8gbWFnbml0dWRlKSAqIG51ZGdlRmFjdG9yO1xyXG4gICAgICAgICAgICAgICAgcDUucXVhZHJhdGljVmVydGV4KFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQueDEgKyBvZmZzZXRYLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQueTEgKyBvZmZzZXRZLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQueCArIG9mZnNldFgsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC55ICsgb2Zmc2V0WVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c1BvaW50LnggPSB1bnByb2Nlc3NlZENvbW1hbmQueDtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUG9pbnQueSA9IHVucHJvY2Vzc2VkQ29tbWFuZC55O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmQudHlwZSA9PT0gXCJaXCIgJiYgdW5wcm9jZXNzZWRDb21tYW5kLnR5cGUgPT09IFwiWlwiKSB7XHJcbiAgICAgICAgICAgICAgICBwNS5lbmRTaGFwZShwNS5DTE9TRSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGV4dEZpbGxTdGF0dXNDb3VudGVyKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyRmlsbFN0YXR1c1t0ZXh0RmlsbFN0YXR1c0NvdW50ZXJdID09PSBGaWxsU3RhdHVzLkZJTExFRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHA1LmZpbGwodGV4dEZvcmVncm91bmRDb2xvdXIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXJGaWxsU3RhdHVzW3RleHRGaWxsU3RhdHVzQ291bnRlcl0gPT09IEZpbGxTdGF0dXMuT1BFTikge1xyXG4gICAgICAgICAgICAgICAgICAgIHA1LmZpbGwodGV4dEJhY2tncm91bmRDb2xvdXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcDUucG9wKCk7XHJcbn1cclxuIl0sIm5hbWVzIjpbImZyZWFrVG8iLCJwNSIsInRleHRQYXRocyIsIm9wdGlvbnMiLCJyYW5kb21Vbml0IiwiY29uc29sZSIsImVycm9yIiwicHJvY2Vzc2VkVGV4dFBhdGhzIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiY2hhcmFjdGVySW5kZXgiLCJsZW5ndGgiLCJjaGFyYWN0ZXJQYXRoIiwibmV3Q2hhcmFjdGVyUGF0aENvbW1hbmRzIiwicHJldmlvdXNQb2ludCIsIngiLCJ5IiwiY2hhclBhdGhDb21tYW5kSW5kZXgiLCJjb21tYW5kcyIsImNvbW1hbmQiLCJ0eXBlIiwicHVzaCIsInJhbmRvbSIsImxlcnBJbnRlcnZhbHMiLCJpIiwic29ydCIsImEiLCJiIiwibGVycEludGVydmFsIiwibGVycGVkWCIsImxlcnAiLCJsZXJwZWRZIiwic3BsaWNlIiwieDEiLCJ5MSIsIngyIiwieTIiLCJsaWJyZUJhc2tlcnZpbGxlUmVnUDUiLCJsaWJyZUJhc2tlcnZpbGxlUmVnT1RGIiwibGlicmVCYXNrZXJ2aWxsZUl0YWxpY1A1IiwibGlicmVCYXNrZXJ2aWxsZUJvbGRQNSIsInVucHJvY2Vzc2VkVGV4dFBhdGhzIiwiZXJvc2lvblN0cmVuZ3RoU2xpZGVyIiwiZXJvc2lvblN0cmVuZ3RoVmFsdWVUZXh0IiwiZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyIiwiZnJlYWtUb0NyYXppbmVzc1ZhbHVlVGV4dCIsInNhbXBsZVRleHRzIiwidGV4dCIsIk1hdGgiLCJyb3VuZCIsInJlZHJhd0ZvbnQiLCJpbW1lZGlhdGVseVJlZHJhdyIsImJhY2tncm91bmQiLCJwYXRocyIsImNyYXppbmVzcyIsInZhbHVlIiwicHJvY2Vzc2VkVGV4dFBhdGgiLCJvcmlnaW5hbFRleHRQYXRoIiwiZXJvc2lvblN0cmVuZ3RoIiwicHJlbG9hZCIsImxvYWRGb250Iiwic2V0dXAiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicGFyc2VGbG9hdCIsIlN0cmluZyIsImh0bWwiLCJjcmVhdGVDYW52YXMiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsImZvbnQiLCJsb2ciLCJ1bmRlZmluZWQiLCJjcmVhdGVTbGlkZXIiLCJwb3NpdGlvbiIsInNpemUiLCJmcmVha1RvQ3JhemluZXNzTGFiZWwiLCJjcmVhdGVQIiwic3R5bGUiLCJjaGFuZ2VkIiwiZXJvc2lvblN0cmVuZ3RoTGFiZWwiLCJ3aW5kb3dSZXNpemVkIiwicmVzaXplQ2FudmFzIiwia2V5UHJlc3NlZCIsIm5lZWRzVXBkYXRlIiwia2V5Iiwic2xpY2UiLCJwYXRoQ291bnRlckNvdW50ZXIiLCJjb3VudGVyQ291bnRlciIsImV4dHJhY3RTaGFwZXNGcm9tUGF0aCIsInBhdGgiLCJjdXJyU2hhcGVDb3VudGVyIiwiY3VyclNoYXBlcyIsImdldEZpcnN0U3RhcnRQb2ludEluUGF0aCIsInBhdGhDb21tYW5kcyIsInBhdGhDb21tYW5kc1RvUGF0aERhdGEiLCJkZWNpbWFsUGxhY2VzIiwicGF0aERhdGEiLCJ0b0ZpeGVkIiwiRmlsbFN0YXR1cyIsInRleHRGb3JlZ3JvdW5kQ29sb3VyIiwidGV4dEJhY2tncm91bmRDb2xvdXIiLCJnZXRUZXh0UGF0aHMiLCJ0eXBlU2l6ZSIsImZvbnRQcmVwcm9jZXNzb3IiLCJmb250UHJlcHJvY2Vzc29yT3B0aW9ucyIsInRleHRCb3VuZGluZ0JveCIsImdldFBhdGgiLCJrZXJuaW5nIiwiZ2V0Qm91bmRpbmdCb3giLCJ0ZXh0SGVpZ2h0IiwidGV4dFdpZHRoIiwiZ2V0UGF0aHMiLCJyZW5kZXJGb250IiwiZm9udFJlbmRlcmVyIiwiZm9udFJlbmRlcmVyT3B0aW9ucyIsInRleHRGaWxsU3RhdHVzZXMiLCJzYW1wbGVPZmZzZXRLZXJuZWwiLCJzaWRlTGVuZ3RoIiwic2FtcGxlVW5pdCIsInNhbXBsZU9mZnNldEdyaWQiLCJtYXhTYW1wbGVVbml0U2NhbGUiLCJmbG9vciIsImoiLCJnZW5lcmF0ZVNhbXBsZU9mZnNldEdyaWQiLCJjdHgiLCJkcmF3aW5nQ29udGV4dCIsImVudGlyZUxldHRlcmZvcm1QYXRoIiwiY291bnRlckNvdW50IiwiRklMTEVEIiwibGV0dGVyZm9ybUNvbXBvbmVudFNoYXBlcyIsImxldHRlcmZvcm1Db21wb25lbnRTaGFwZSIsInNhbXBsZVBvaW50Iiwic2FtcGxlUG9pbnRPZmZzZXQiLCJ3YXNGaWxsU3RhdHVzQXNzaWduZWQiLCJzYW1wbGVPZmZzZXQiLCJjaGFyYWN0ZXJQYXRoMkQiLCJQYXRoMkQiLCJpc0luUGF0aCIsImlzUG9pbnRJblBhdGgiLCJwaXhlbERlbnNpdHkiLCJpc0luU3Ryb2tlIiwiaXNQb2ludEluU3Ryb2tlIiwiY2hhcmFjdGVyU2hhcGVQYXRoMkQiLCJ0b1BhdGhEYXRhIiwiT1BFTiIsImdldFRleHRGaWxsU3RhdHVzZXMiLCJlcm9kZSIsIm51ZGdlRmFjdG9yIiwibm9TdHJva2UiLCJ1bnByb2Nlc3NlZENoYXJhY3RlclBhdGgiLCJjaGFyYWN0ZXJGaWxsU3RhdHVzIiwidGV4dEZpbGxTdGF0dXNDb3VudGVyIiwiZmlsbCIsImR4IiwiZHkiLCJtYWduaXR1ZGUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInVucHJvY2Vzc2VkQ29tbWFuZCIsImJlZ2luU2hhcGUiLCJzcXJ0IiwidmVydGV4IiwiYmV6aWVyVmVydGV4IiwicXVhZHJhdGljVmVydGV4IiwiZW5kU2hhcGUiLCJDTE9TRSIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=