(self.webpackChunkrandomfont=self.webpackChunkrandomfont||[]).push([[882],{97:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Bold.ttf"},164:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Italic.ttf"},331:(e,t,o)=>{"use strict";var n=o(996),s=o.n(n),i=o(652),l=o(496),r=o(164),a=o(97);function d(e,t){console.log("Random Unit Modifier is: 5e-25"),console.log("Random Unit: 2"),t[0]={x:t[0].x+e.random(-2,2),y:t[0].y+e.random(-2,2)},e.push(),e.strokeWeight(0),e.fill(12.5),e.beginShape();for(let o=0;o<t.length;o++){let n=t[o];if(o+1>=t.length)break;let s=t[o+1],i=s.x-n.x,l=s.y-n.y;Math.sqrt(i**2+l**2)>20?(e.endShape(e.CLOSE),e.beginShape()):(t[o+1]={x:s.x+e.random(-2,2),y:s.y+e.random(-2,2)},e.vertex(n.x,n.y))}e.endShape(e.CLOSE),e.pop()}var p=o(493),y=o(386);new(s())(function(e){let t,o,n,s,c,x,f,h,u,g,m=["Archaeopteryx","The “Big Five”","End-Ordovician","Late Devonian","End-Permian","End-Triassic","End-Cretaceous"],w=m[Math.round(e.random(0,m.length-1))];function k(n=!0){if(e.background(255),n){let t=p.is(e,o,w,148,y.H,{craziness:u.value()});c=t.processedTextPath,x=t.originalTextPath}!function(e,t,o,n,s,i){const l=o.split("\n").length;e.textFont(t),e.textSize(148);let r=t.textToPoints(o,(e.windowWidth-e.textWidth(o))/2,(e.windowHeight+-l*(e.textAscent()-e.textDescent()))/2,148,{sampleFactor:.13});i(e,r)}(e,t,w,0,0,d)}e.preload=()=>{t=e.loadFont(l),n=e.loadFont(r),s=e.loadFont(a)},e.setup=()=>{window.addEventListener("afterprint",()=>{k(!1),f.value(parseFloat(String(f.value()))+2),h.html(String(f.value()))}),e.createCanvas(e.windowWidth,e.windowHeight),i.Ay.load(l,(e,t)=>{e?console.log("opentype.js | "+l+" could not be loaded: "+e):void 0!==t?(o=t,k(),console.log("opentype.js | "+l+" loaded.")):console.log("opentype.js | "+l+" could not be loaded: it was undefined")}),u=e.createSlider(0,10,3.56,.01),u.position(65,10),u.size(200);let t=e.createP("crazy");t.style("position: absolute"),t.style("font-family: monospace"),t.style("font-weight: bold"),t.style("font-size: 15px"),t.style("left: 10px"),t.style("top: -3px"),g=e.createP(String(u.value())),g.style("position: absolute"),g.style("font-family: monospace"),g.style("font-size: 15px"),g.style("left: 285px"),g.style("top: -3px"),u.changed(()=>{k(),g.html(String(u.value())),console.log(u.value())}),f=e.createSlider(0,10,4.44,.01),f.position(65,50),f.size(200);let n=e.createP("erode");n.style("position: absolute"),n.style("font-family: monospace"),n.style("font-weight: bold"),n.style("font-size: 15px"),n.style("left: 10px"),n.style("top: 37px"),h=e.createP(String(f.value())),h.style("position: absolute"),h.style("font-family: monospace"),h.style("font-size: 15px"),h.style("left: 285px"),h.style("top: 37px"),f.changed(()=>{k(!1),h.html(String(f.value()))})},e.windowResized=()=>{e.resizeCanvas(e.windowWidth,e.windowHeight),k(!1)},e.keyPressed=()=>{let t=!1;1===e.key.length?(e.key,w+=e.key,t=!0):"Backspace"===e.key?(w=w.slice(0,w.length-1),t=!0):"Enter"===e.key?w+="\n":"ArrowUp"===e.key&&(t=!0),t&&k()}})},386:(e,t,o)=>{"use strict";function n(e,t,o){let n;null!=o&&"craziness"in o?n=o.craziness:(console.error("path-preprocessor.ts | freakTo received malformed options parameter."),n=3);let s=JSON.parse(JSON.stringify(t));for(let o=0;o<t.length;o++){const i=t[o];let l=[],r={x:0,y:0};for(let s=0;s<i.commands.length;s++){let a=i.commands[s];switch(a.type){case"M":l.push({type:"M",x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)});break;case"L":let i=[];for(let t=0;t<e.random(0,n-1);t++)i.push(e.random(0,.9));i.sort((e,t)=>e-t);for(let d of i){let i=e.lerp(r.x,a.x,d),p=e.lerp(r.y,a.y,d);t[o].commands.splice(s,0,{type:"L",x:i,y:p}),l.push({type:"L",x:i+e.random(-n/1.5,n/1.5),y:p+e.random(-n/1.5,n/1.5)})}l.push({type:"L",x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)}),s+=i.length;break;case"C":l.push({type:"C",x1:a.x1+e.random(-n,n),y1:a.y1+e.random(-n,n),x2:a.x2+e.random(-n,n),y2:a.y2+e.random(-n,n),x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)});break;case"Q":l.push({type:"Q",x1:a.x1+e.random(-n,n),y1:a.y1+e.random(-n,n),x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)});break;case"Z":l.push({type:"Z"})}"Z"!==a.type&&(r.x=a.x,r.y=a.y)}s[o].commands=l}return s}o.d(t,{H:()=>n})},493:(e,t,o)=>{"use strict";function n(e){let t=0;for(let o of e.commands)"Z"===o.type&&(t+=1);return 0===t?0:t-1}function s(e){let t=0,o=[[]];for(let n=0;n<e.commands.length;n++){let s=e.commands[n];"Z"!==s.type?o[t].push(s):(o[t].push(s),t++,n!==e.commands.length-1&&o.push([]))}return o}function i(e){for(let t of e)if("C"===t.type||"L"===t.type||"Q"===t.type)return{x:t.x,y:t.y};return null}function l(e,t){let o="";for(let n of e)switch(o+=n.type+" ",n.type){case"M":case"L":o+=n.x.toFixed(t)+","+n.y.toFixed(t);break;case"C":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x2.toFixed(t)+","+n.y2.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t);break;case"Q":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t)}return o}var r;o.d(t,{eV:()=>r,is:()=>p,Q1:()=>y,Yc:()=>d,$Q:()=>a}),function(e){e.FILLED="filled",e.OPEN="open"}(r||(r={}));const a=0,d=255;function p(e,t,o,n,s,i){const l=t.getPath(o,0,0,n,{kerning:!0}).getBoundingBox(),r=l.y2-l.y1,a=l.x2-l.x1;let d=t.getPaths(o,(e.windowWidth-a)/2,(e.windowHeight-r+n)/2,n,{kerning:!0}),p=s(e,d,i);return d.length!==p.length&&console.error("render-font.ts | something has gone wrong in otf\render-font.ts#getTextPaths regarding the lengths of the outputted otf.Path[]"),{originalTextPath:d,processedTextPath:p}}function y(e,t,o,a,d){const p=function(e,t){const o=function(e,t){e%2==0&&(e+=1,console.error("render-font-otf.ts | generateSampleOffsetGrid received an even side length of "+(e-1)+". The actual side length of the grid generated will be odd: "+e));let o=[],n=Math.floor(e/2);for(let e=n;e>=-n;e--)for(let s=-n;s<=n;s++)o.push([s*t,-e*t]);return o}(5,2),a=e.drawingContext;let d=[];for(let p=0;p<t.length;p++){const y=t[p],c=n(y);if(d.push([]),c<=0){d[p].push(r.FILLED);continue}let x=s(y);for(let t of x){let n=i(t);if(null==n){console.error("render-font-otf.ts | samplePoint.x and samplePoint.y was null");break}let s={x:n.x,y:n.y},c=!1;for(let i of o){s.x=n.x+i[0],s.y=n.y+i[1];const o=new Path2D(l(t,3)),x=a.isPointInPath(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y),f=a.isPointInStroke(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y);if(x&&!f){c=!0;let t=new Path2D(y.toPathData(3));const o=a.isPointInPath(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y),n=a.isPointInStroke(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y);o||n?d[p].push(r.FILLED):d[p].push(r.OPEN);break}}c||console.error("render-font-otf.ts | getTextFillStatuses could not find a suitable sample point (at character index "+p+") for calculating text fill status")}}return d}(e,void 0===d?t:d);return void 0!==a&&void 0!==d&&(a.unprocessedTextPaths=d),o(e,t,p,a),t}},496:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Regular.ttf"},753:()=>{}},e=>{e.O(0,[652],()=>e(e.s=331)),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,