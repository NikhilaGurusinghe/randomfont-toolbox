(self.webpackChunkrandomfont=self.webpackChunkrandomfont||[]).push([[284],{97:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Bold.ttf"},149:(e,t,o)=>{"use strict";function n(e,t,o,n,s,i){const l=o.split("\n").length;e.textFont(t),e.textSize(n);let r=t.textToPoints(o,(e.windowWidth-e.textWidth(o))/2,(e.windowHeight+-l*(e.textAscent()-e.textDescent()))/2,n,{sampleFactor:s});i(e,r)}function s(e,t){console.log("Random Unit Modifier is: 5e-25"),console.log("Random Unit: 2"),t[0]={x:t[0].x+e.random(-2,2),y:t[0].y+e.random(-2,2)},e.push(),e.strokeWeight(0),e.fill(12.5),e.beginShape();for(let o=0;o<t.length;o++){let n=t[o];if(o+1>=t.length)break;let s=t[o+1],i=s.x-n.x,l=s.y-n.y;Math.sqrt(i**2+l**2)>20?(e.endShape(e.CLOSE),e.beginShape()):(t[o+1]={x:s.x+e.random(-2,2),y:s.y+e.random(-2,2)},e.vertex(n.x,n.y))}e.endShape(e.CLOSE),e.pop()}o.d(t,{XX:()=>n,sF:()=>s})},151:(e,t,o)=>{"use strict";var n=o(996),s=o.n(n),i=o(652),l=o(496),r=o(164),a=o(97),d=o(149),p=o(493),y=o(386);new(s())(function(e){let t,o,n,s,c,x,f,h,u,g,m=["Archaeopteryx","The “Big Five”","End-Ordovician","Late Devonian","End-Permian","End-Triassic","End-Cretaceous"],w=m[Math.round(e.random(0,m.length-1))];function k(n=!0){if(e.background(255),n){let t=p.is(e,o,w,148,y.H,{craziness:u.value()});c=t.processedTextPath,x=t.originalTextPath}d.XX(e,t,w,148,.13,d.sF)}e.preload=()=>{t=e.loadFont(l),n=e.loadFont(r),s=e.loadFont(a)},e.setup=()=>{window.addEventListener("afterprint",()=>{k(!1),f.value(parseFloat(String(f.value()))+2),h.html(String(f.value()))}),e.createCanvas(e.windowWidth,e.windowHeight),i.Ay.load(l,(e,t)=>{e?console.log("opentype.js | "+l+" could not be loaded: "+e):void 0!==t?(o=t,k(),console.log("opentype.js | "+l+" loaded.")):console.log("opentype.js | "+l+" could not be loaded: it was undefined")}),u=e.createSlider(0,10,3.56,.01),u.position(65,10),u.size(200);let t=e.createP("crazy");t.style("position: absolute"),t.style("font-family: monospace"),t.style("font-weight: bold"),t.style("font-size: 15px"),t.style("left: 10px"),t.style("top: -3px"),g=e.createP(String(u.value())),g.style("position: absolute"),g.style("font-family: monospace"),g.style("font-size: 15px"),g.style("left: 285px"),g.style("top: -3px"),u.changed(()=>{k(),g.html(String(u.value())),console.log(u.value())}),f=e.createSlider(0,10,4.44,.01),f.position(65,50),f.size(200);let n=e.createP("erode");n.style("position: absolute"),n.style("font-family: monospace"),n.style("font-weight: bold"),n.style("font-size: 15px"),n.style("left: 10px"),n.style("top: 37px"),h=e.createP(String(f.value())),h.style("position: absolute"),h.style("font-family: monospace"),h.style("font-size: 15px"),h.style("left: 285px"),h.style("top: 37px"),f.changed(()=>{k(!1),h.html(String(f.value()))})},e.windowResized=()=>{e.resizeCanvas(e.windowWidth,e.windowHeight),k(!1)},e.keyPressed=()=>{let t=!1;1===e.key.length?(e.key,w+=e.key,t=!0):"Backspace"===e.key?(w=w.slice(0,w.length-1),t=!0):"Enter"===e.key?w+="\n":"ArrowUp"===e.key&&(t=!0),t&&k()}})},164:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Italic.ttf"},386:(e,t,o)=>{"use strict";function n(e,t,o){let n;null!=o&&"craziness"in o?n=o.craziness:(console.error("path-preprocessor.ts | freakTo received malformed options parameter."),n=3);let s=JSON.parse(JSON.stringify(t));for(let o=0;o<t.length;o++){const i=t[o];let l=[],r={x:0,y:0};for(let s=0;s<i.commands.length;s++){let a=i.commands[s];switch(a.type){case"M":l.push({type:"M",x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)});break;case"L":let i=[];for(let t=0;t<e.random(0,n-1);t++)i.push(e.random(0,.9));i.sort((e,t)=>e-t);for(let d of i){let i=e.lerp(r.x,a.x,d),p=e.lerp(r.y,a.y,d);t[o].commands.splice(s,0,{type:"L",x:i,y:p}),l.push({type:"L",x:i+e.random(-n/1.5,n/1.5),y:p+e.random(-n/1.5,n/1.5)})}l.push({type:"L",x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)}),s+=i.length;break;case"C":l.push({type:"C",x1:a.x1+e.random(-n,n),y1:a.y1+e.random(-n,n),x2:a.x2+e.random(-n,n),y2:a.y2+e.random(-n,n),x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)});break;case"Q":l.push({type:"Q",x1:a.x1+e.random(-n,n),y1:a.y1+e.random(-n,n),x:a.x+e.random(-n,n),y:a.y+e.random(-n,n)});break;case"Z":l.push({type:"Z"})}"Z"!==a.type&&(r.x=a.x,r.y=a.y)}s[o].commands=l}return s}o.d(t,{H:()=>n})},493:(e,t,o)=>{"use strict";function n(e){let t=0;for(let o of e.commands)"Z"===o.type&&(t+=1);return 0===t?0:t-1}function s(e){let t=0,o=[[]];for(let n=0;n<e.commands.length;n++){let s=e.commands[n];"Z"!==s.type?o[t].push(s):(o[t].push(s),t++,n!==e.commands.length-1&&o.push([]))}return o}function i(e){for(let t of e)if("C"===t.type||"L"===t.type||"Q"===t.type)return{x:t.x,y:t.y};return null}function l(e,t){let o="";for(let n of e)switch(o+=n.type+" ",n.type){case"M":case"L":o+=n.x.toFixed(t)+","+n.y.toFixed(t);break;case"C":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x2.toFixed(t)+","+n.y2.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t);break;case"Q":o+=n.x1.toFixed(t)+","+n.y1.toFixed(t)+" "+n.x.toFixed(t)+","+n.y.toFixed(t)}return o}var r;o.d(t,{eV:()=>r,is:()=>p,Q1:()=>y,Yc:()=>d,$Q:()=>a}),function(e){e.FILLED="filled",e.OPEN="open"}(r||(r={}));const a=0,d=255;function p(e,t,o,n,s,i){const l=t.getPath(o,0,0,n,{kerning:!0}).getBoundingBox(),r=l.y2-l.y1,a=l.x2-l.x1;let d=t.getPaths(o,(e.windowWidth-a)/2,(e.windowHeight-r+n)/2,n,{kerning:!0}),p=s(e,d,i);return d.length!==p.length&&console.error("render-font.ts | something has gone wrong in otf\render-font.ts#getTextPaths regarding the lengths of the outputted otf.Path[]"),{originalTextPath:d,processedTextPath:p}}function y(e,t,o,a,d){const p=function(e,t){const o=function(e,t){e%2==0&&(e+=1,console.error("render-font-otf.ts | generateSampleOffsetGrid received an even side length of "+(e-1)+". The actual side length of the grid generated will be odd: "+e));let o=[],n=Math.floor(e/2);for(let e=n;e>=-n;e--)for(let s=-n;s<=n;s++)o.push([s*t,-e*t]);return o}(5,2),a=e.drawingContext;let d=[];for(let p=0;p<t.length;p++){const y=t[p],c=n(y);if(d.push([]),c<=0){d[p].push(r.FILLED);continue}let x=s(y);for(let t of x){let n=i(t);if(null==n){console.error("render-font-otf.ts | samplePoint.x and samplePoint.y was null");break}let s={x:n.x,y:n.y},c=!1;for(let i of o){s.x=n.x+i[0],s.y=n.y+i[1];const o=new Path2D(l(t,3)),x=a.isPointInPath(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y),f=a.isPointInStroke(o,e.pixelDensity()*s.x,e.pixelDensity()*s.y);if(x&&!f){c=!0;let t=new Path2D(y.toPathData(3));const o=a.isPointInPath(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y),n=a.isPointInStroke(t,e.pixelDensity()*s.x,e.pixelDensity()*s.y);o||n?d[p].push(r.FILLED):d[p].push(r.OPEN);break}}c||console.error("render-font-otf.ts | getTextFillStatuses could not find a suitable sample point (at character index "+p+") for calculating text fill status")}}return d}(e,void 0===d?t:d);return void 0!==a&&void 0!==d&&(a.unprocessedTextPaths=d),o(e,t,p,a),t}},496:(e,t,o)=>{"use strict";e.exports=o.p+"assets/fonts/LibreBaskerville-Regular.ttf"},753:()=>{}},e=>{e.O(0,[652],()=>e(e.s=151)),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NkksRUFBc0JoQixFQUFJaUIsZ0JBQzVCTixFQUNBaEssRUFBR29LLGVBQWlCUCxFQUFrQnZJLEVBQ3RDdEIsRUFBR29LLGVBQWlCUCxFQUFrQnJJLEdBSzFDLEdBQUkwSSxJQUFhRyxFQUFZLENBQ3pCUCxHQUF3QixFQUV4QixJQUFJUyxFQUErQixJQUFJTixPQUFPVixFQUFxQmlCLFdBMUQ5QyxJQTZEckIsTUFBTU4sRUFBb0JiLEVBQUljLGNBQzFCSSxFQUNBdkssRUFBR29LLGVBQWlCUCxFQUFrQnZJLEVBQ3RDdEIsRUFBR29LLGVBQWlCUCxFQUFrQnJJLEdBR3BDNkksRUFBc0JoQixFQUFJaUIsZ0JBQzVCQyxFQUNBdkssRUFBR29LLGVBQWlCUCxFQUFrQnZJLEVBQ3RDdEIsRUFBR29LLGVBQWlCUCxFQUFrQnJJLEdBS3RDMEksR0FBWUcsRUFDWnpCLEVBQWlCaEQsR0FBZ0JuRSxLQUFLb0csRUFBVzRCLFFBRWpEYixFQUFpQmhELEdBQWdCbkUsS0FBS29HLEVBQVc0QyxNQUdyRCxLQUNKLENBQ0osQ0FHS1gsR0FFRDFJLFFBQVFpRCxNQUFNLHVHQUNldUIsRUFBaUIscUNBRXRELENBQ0osQ0FFQSxPQUFPZ0QsQ0FDWCxDQWxJUThCLENBQW9CMUssT0FEMENzRSxJQUF6QnpCLEVBQ2JELEVBQXFDQyxHQVdqRSxZQVA0QnlCLElBQXhCcUUsUUFBOERyRSxJQUF6QnpCLElBQ3JDOEYsRUFBMEMscUJBQUk5RixHQUlsRHhDLEVBQWFMLEVBQUk0QyxFQUFXZ0csRUFBa0JELEdBRXZDL0YsQ0FDWCxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9yZW5kZXJlcnMvcDUvcmVuZGVyLWZvbnQudHMiLCJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9leHBlcmltZW50cy9zbWFsbC9za2V0Y2gudHMiLCJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9yZW5kZXJlcnMvb3RmL3BhdGgtcHJlcHJvY2Vzc29yLnRzIiwid2VicGFjazovL3JhbmRvbWZvbnQvLi9zcmMvcmVuZGVyZXJzL290Zi91dGlsL3R5cGUtY291bnRlcnMudHMiLCJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9yZW5kZXJlcnMvb3RmL3V0aWwvb3RmLXBhdGgtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vcmFuZG9tZm9udC8uL3NyYy9yZW5kZXJlcnMvb3RmL3JlbmRlci1mb250LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwNSBmcm9tICdwNSc7XHJcblxyXG50eXBlIEZvbnRSZW5kZXJTdHJhdGVneSA9IChwNTogcDUsIHBvaW50czogUG9pbnRbXSkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIocDU6IHA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IHA1LkZvbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZm9udFNhbXBsZUZhY3RvcjogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGZvbnRSZW5kZXJlcjogRm9udFJlbmRlclN0cmF0ZWd5KSA6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IG51bWJlck9mTGluZXMgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpLmxlbmd0aDtcclxuXHJcbiAgICBwNS50ZXh0Rm9udChmb250KTtcclxuICAgIHA1LnRleHRTaXplKGZvbnRTaXplKTtcclxuICAgIGxldCBwb2ludHM6IFBvaW50W10gPSBmb250LnRleHRUb1BvaW50cyhcclxuICAgICAgICB0ZXh0LFxyXG4gICAgICAgIChwNS53aW5kb3dXaWR0aCAtIHA1LnRleHRXaWR0aCh0ZXh0KSkgLyAyLFxyXG4gICAgICAgIChwNS53aW5kb3dIZWlnaHQgKyAtbnVtYmVyT2ZMaW5lcyAqIChwNS50ZXh0QXNjZW50KCkgLSBwNS50ZXh0RGVzY2VudCgpKSkgLyAyLFxyXG4gICAgICAgIGZvbnRTaXplLFxyXG4gICAgICAgIHsgc2FtcGxlRmFjdG9yOiBmb250U2FtcGxlRmFjdG9yIH1cclxuICAgICk7XHJcblxyXG4gICAgZm9udFJlbmRlcmVyKHA1LCBwb2ludHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RyYXRlZ3lSYW5kb21Qb2ludHMocDU6IHA1LCBwb2ludHM6IFBvaW50W10pIDogdm9pZCB7XHJcbiAgICBwNS5zdHJva2VXZWlnaHQoMS43NSk7XHJcblxyXG4gICAgZm9yIChsZXQgcCBvZiBwb2ludHMpIHtcclxuICAgICAgICBwNS5wb2ludChwLnggKyBwNS5yYW5kb20oMCwgMTUpLCBwLnkgKyBwNS5yYW5kb20oMCwgNSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RyYXRlZ3lQb2ludHMocDU6IHA1LCBwb2ludHM6IFBvaW50W10pIDogdm9pZCB7XHJcbiAgICBwNS5zdHJva2VXZWlnaHQoMik7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGxldCBwID0gcG9pbnRzW2ldO1xyXG4gICAgICAgIHA1LnBvaW50KHAueCwgcC55KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclN0cmF0ZWd5T3V0bGluZWQocDU6IHA1LCBwb2ludHM6UG9pbnRbXSkgOiB2b2lkIHtcclxuICAgIGxldCBtYXhKdW1wRGlzdGFuY2UgPSA3O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHBvaW50MTogUG9pbnQgID0gcG9pbnRzW2ldO1xyXG4gICAgICAgIGlmIChpICsgMSA+PSBwb2ludHMubGVuZ3RoKSBicmVhaztcclxuICAgICAgICBsZXQgcG9pbnQyOiBQb2ludCA9IHBvaW50c1tpICsgMV07XHJcblxyXG4gICAgICAgIC8vIFN0b3BwaW5nIFwianVtcCBzdGl0Y2hlc1wiIGludHJhIGFuZCBpbnRlciBsZXR0ZXJzXHJcbiAgICAgICAgbGV0IGR4ID0gcG9pbnQyLnggLSBwb2ludDEueDtcclxuICAgICAgICBsZXQgZHkgPSBwb2ludDIueSAtIHBvaW50MS55O1xyXG4gICAgICAgIGlmIChNYXRoLnNxcnQoZHggKiogMiArIGR5ICoqIDIpID4gbWF4SnVtcERpc3RhbmNlKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgcDUubGluZShwb2ludDEueCwgcG9pbnQxLnksIHBvaW50Mi54LCBwb2ludDIueSk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RyYXRlZ3lSYW5kb21PdXRsaW5lZChwNTogcDUsIHBvaW50czpQb2ludFtdKSA6IHZvaWQge1xyXG4gICAgbGV0IG1heEp1bXBEaXN0YW5jZSA9IDc7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgcG9pbnQxOiBQb2ludCAgPSBwb2ludHNbaV07XHJcbiAgICAgICAgaWYgKGkgKyAxID49IHBvaW50cy5sZW5ndGgpIGJyZWFrO1xyXG4gICAgICAgIGxldCBwb2ludDI6IFBvaW50ID0gcG9pbnRzW2kgKyAxXTtcclxuXHJcbiAgICAgICAgLy8gU3RvcHBpbmcgXCJqdW1wIHN0aXRjaGVzXCIgaW50cmEgYW5kIGludGVyIGxldHRlcnNcclxuICAgICAgICBsZXQgZHggPSBwb2ludDIueCAtIHBvaW50MS54O1xyXG4gICAgICAgIGxldCBkeSA9IHBvaW50Mi55IC0gcG9pbnQxLnk7XHJcbiAgICAgICAgaWYgKE1hdGguc3FydChkeCAqKiAyICsgZHkgKiogMikgPiBtYXhKdW1wRGlzdGFuY2UpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBnZW5lcmF0ZSByYW5kb20gaW50ZXJtZWRpYXJ5IHBvaW50XHJcbiAgICAgICAgbGV0IHJhbmRvbVVuaXQgPSBwNS5yYW5kb20oMCwgMTAwKTtcclxuICAgICAgICBpZiAocmFuZG9tVW5pdCA+IDQ1KSB7XHJcbiAgICAgICAgICAgIGxldCBwb2ludDNYID0gcG9pbnQxLnggKyBkeCArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdC8xMCwgcmFuZG9tVW5pdC8yMCk7XHJcbiAgICAgICAgICAgIGxldCBwb2ludDNZID0gcG9pbnQxLnkgKyBkeSArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdC8xMCwgcmFuZG9tVW5pdC8yMCk7XHJcblxyXG4gICAgICAgICAgICBwNS5saW5lKHBvaW50MS54LCBwb2ludDEueSwgcG9pbnQzWCwgcG9pbnQzWSk7XHJcbiAgICAgICAgICAgIHA1LmxpbmUocG9pbnQzWCwgcG9pbnQzWSwgcG9pbnQyLngsIHBvaW50Mi55KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwNS5saW5lKHBvaW50MS54LCBwb2ludDEueSwgcG9pbnQyLngsIHBvaW50Mi55KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdHJhdGVneUZpbGxlZChwNTogcDUsIHBvaW50czogUG9pbnRbXSkgOiB2b2lkIHtcclxuICAgIGxldCBtYXhKdW1wRGlzdGFuY2UgPSAyMDtcclxuXHJcbiAgICBwNS5wdXNoKCk7XHJcbiAgICBwNS5zdHJva2VXZWlnaHQoMCk7XHJcbiAgICBwNS5iZWdpblNoYXBlKCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vIHRoaXMgd2FzIGNoYW5nZWQgYnkgdGhlIHByZXZpb3VzIGl0ZXJhdGlvblxyXG4gICAgICAgIGxldCBwb2ludDE6IFBvaW50ID0gcG9pbnRzW2ldO1xyXG4gICAgICAgIGlmIChpICsgMSA+PSBwb2ludHMubGVuZ3RoKSBicmVhaztcclxuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgcmFuZG9taXplZCBvbiB0aGlzIGl0ZXJhdGlvblxyXG4gICAgICAgIGxldCBwb2ludDI6IFBvaW50ID0gcG9pbnRzW2kgKyAxXTtcclxuXHJcbiAgICAgICAgLy8gU3RvcHBpbmcgXCJqdW1wIHN0aXRjaGVzXCIgaW50cmEgYW5kIGludGVyIGxldHRlcnNcclxuICAgICAgICBsZXQgZHggPSBwb2ludDIueCAtIHBvaW50MS54O1xyXG4gICAgICAgIGxldCBkeSA9IHBvaW50Mi55IC0gcG9pbnQxLnk7XHJcbiAgICAgICAgaWYgKE1hdGguc3FydChkeCAqKiAyICsgZHkgKiogMikgPiBtYXhKdW1wRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgcDUuZW5kU2hhcGUocDUuQ0xPU0UpO1xyXG4gICAgICAgICAgICBwNS5iZWdpblNoYXBlKCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIERldGVybWluaW5nIHRoZSB3aW5kaW5nIGRpcmVjdGlvbiBvZiB0aGUgcG9pbnRzXHJcbiAgICAgICAgLy8gdGhpcyBpcyBzbyBjb3VudGVycyBzaG93IGFzIGhvbGVzIGluIHRoZSB0eXBlLlxyXG4gICAgICAgIC8vIHRleHRUb1BvaW50cyB3aW5kcyBjb3VudGVycyBhcyBjbG9ja3dpc2Ugd2hpbHN0IG90aGVyIHBhcnRzIG9mIHRoZSB0eXBlIGFyZSB3b3VuZCBhbnRpY2xvY2t3aXNlIDopXHJcbiAgICAgICAgLy8gaSBoYXRlIGhvdyBsaW5lYXIgYWxnZWJyYSBpcyB0aGUgYW5zd2VyIHRvIHRoaXM6XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VydmVfb3JpZW50YXRpb24jT3JpZW50YXRpb25fb2ZfYV9zaW1wbGVfcG9seWdvblxyXG4gICAgICAgIC8vIGlmIChpICsgMiA8IHBvaW50cy5sZW5ndGgpIHsgLy8gd2UgbmVlZCAzIHBvaW50cyB0byBjYWxjdWxhdGUgdGhlIHdpbmRpbmcgZGlyZWN0aW9uXHJcbiAgICAgICAgLy8gICAgIGxldCBwb2ludDM6IFBvaW50ID0gcG9pbnRzW2kgKyAyXTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgICBsZXQgZGV0ZXJtaW5hbnRPZlBvaW50cyA9ICgocG9pbnQyLnggKiBwb2ludDMueSkgKyAocG9pbnQxLnggKiBwb2ludDIueSkgKyAocG9pbnQxLnkgKiBwb2ludDMueCkpXHJcbiAgICAgICAgLy8gICAgICAgICAtICgocG9pbnQxLnkgKiBwb2ludDIueCkgKyAocG9pbnQyLnkgKiBwb2ludDMueCkgKyAocG9pbnQxLnggKiBwb2ludDMueSkpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAgIGxldCBjdXJyV2luZGluZ0RpcmVjdGlvbiA9IGRldGVybWluYW50T2ZQb2ludHMgPCAwID9cclxuICAgICAgICAvLyAgICAgICAgIFdpbmRpbmdEaXJlY3Rpb24uQ0xPQ0tXSVNFIDogV2luZGluZ0RpcmVjdGlvbi5BTlRJQ0xPQ0tXSVNFO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAgIGlmIChjdXJyV2luZGluZ0RpcmVjdGlvbiA9PT0gV2luZGluZ0RpcmVjdGlvbi5DTE9DS1dJU0UpIHtcclxuICAgICAgICAvLyAgICAgICAgIHA1LmZpbGwoMTIuNSk7XHJcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICBwNS5maWxsKDI1NSk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgICBpZiAoZGV0ZXJtaW5hbnRPZlBvaW50cyA9PT0gMCkge1xyXG4gICAgICAgIC8vICAgICAgICAgcDUuZmlsbCgyNTUpO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyAgICAgcHJldldpbmRpbmdEaXJlY3Rpb24gPSBkZXRlcm1pbmFudE9mUG9pbnRzIDwgMCA/XHJcbiAgICAgICAgLy8gICAgICAgICBXaW5kaW5nRGlyZWN0aW9uLkNMT0NLV0lTRSA6IFdpbmRpbmdEaXJlY3Rpb24uQU5USUNMT0NLV0lTRTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcImN1cnJlbnREZXQ6IFwiICsgZGV0ZXJtaW5hbnRPZlBvaW50cyArIFwiLCBvcmllbnRlZDogXCIgKyBwcmV2V2luZGluZ0RpcmVjdGlvbik7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBwNS52ZXJ0ZXgocG9pbnQxLngsIHBvaW50MS55KTtcclxuICAgIH1cclxuICAgIHA1LmVuZFNoYXBlKHA1LkNMT1NFKTtcclxuICAgIHA1LnBvcCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RyYXRlZ3lCZW93dWxmKHA1OiBwNSwgcG9pbnRzOiBQb2ludFtdKSA6IHZvaWQge1xyXG4gICAgbGV0IG1heEp1bXBEaXN0YW5jZSA9IDIwO1xyXG4gICAgbGV0IHJhbmRvbVVuaXRNb2RpZmllciA9IDAuMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTtcclxuICAgIGNvbnNvbGUubG9nKFwiUmFuZG9tIFVuaXQgTW9kaWZpZXIgaXM6IFwiICsgcmFuZG9tVW5pdE1vZGlmaWVyKTtcclxuICAgIGxldCByYW5kb21Vbml0ID0gMjtcclxuICAgIGNvbnNvbGUubG9nKFwiUmFuZG9tIFVuaXQ6IFwiICsgcmFuZG9tVW5pdCk7XHJcblxyXG4gICAgcG9pbnRzWzBdID0ge1xyXG4gICAgICAgIHg6IHBvaW50c1swXS54ICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICB5OiBwb2ludHNbMF0ueSArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdCksXHJcbiAgICB9XHJcblxyXG4gICAgcDUucHVzaCgpO1xyXG4gICAgcDUuc3Ryb2tlV2VpZ2h0KDApO1xyXG4gICAgcDUuZmlsbCgxMi41KTtcclxuICAgIHA1LmJlZ2luU2hhcGUoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gdGhpcyB3YXMgY2hhbmdlZCBieSB0aGUgcHJldmlvdXMgaXRlcmF0aW9uXHJcbiAgICAgICAgbGV0IHBvaW50MTogUG9pbnQgPSBwb2ludHNbaV07XHJcbiAgICAgICAgaWYgKGkgKyAxID49IHBvaW50cy5sZW5ndGgpIGJyZWFrO1xyXG4gICAgICAgIC8vIHRoaXMgd2lsbCBiZSByYW5kb21pemVkIG9uIHRoaXMgaXRlcmF0aW9uXHJcbiAgICAgICAgbGV0IHBvaW50MjogUG9pbnQgPSBwb2ludHNbaSArIDFdO1xyXG5cclxuICAgICAgICAvLyBTdG9wcGluZyBcImp1bXAgc3RpdGNoZXNcIiBpbnRyYSBhbmQgaW50ZXIgbGV0dGVyc1xyXG4gICAgICAgIGxldCBkeCA9IHBvaW50Mi54IC0gcG9pbnQxLng7XHJcbiAgICAgICAgbGV0IGR5ID0gcG9pbnQyLnkgLSBwb2ludDEueTtcclxuICAgICAgICBpZiAoTWF0aC5zcXJ0KGR4ICoqIDIgKyBkeSAqKiAyKSA+IG1heEp1bXBEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICBwNS5lbmRTaGFwZShwNS5DTE9TRSk7XHJcbiAgICAgICAgICAgIHA1LmJlZ2luU2hhcGUoKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gcmFuZG9tVW5pdCA9IHA1LnJhbmRvbShcclxuICAgICAgICAvLyAgICAgLTEwICogcDUubm9pc2UocmFuZG9tVW5pdE1vZGlmaWVyKSxcclxuICAgICAgICAvLyAgICAgMTAgKiBwNS5ub2lzZShyYW5kb21Vbml0TW9kaWZpZXIpXHJcbiAgICAgICAgLy8gKTtcclxuXHJcbiAgICAgICAgcG9pbnRzW2kgKyAxXSA9IHtcclxuICAgICAgICAgICAgeDogcG9pbnQyLnggKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICB5OiBwb2ludDIueSArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdCksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcDUudmVydGV4KHBvaW50MS54LCBwb2ludDEueSk7XHJcbiAgICB9XHJcbiAgICBwNS5lbmRTaGFwZShwNS5DTE9TRSk7XHJcbiAgICBwNS5wb3AoKTtcclxufVxyXG4iLCJpbXBvcnQgcDUgZnJvbSAncDUnO1xyXG5pbXBvcnQgb3RmIGZyb20gJ29wZW50eXBlLmpzJztcclxuXHJcbmltcG9ydCAnQHNyYy9zdHlsZXMvc2tldGNoLmNzcyc7XHJcblxyXG5pbXBvcnQgbGlicmVCYXNrZXJ2aWxsZVJlZ1BhdGggZnJvbSAnQHNyYy9hc3NldHMvZm9udHMvTGlicmVfQmFza2VydmlsbGUvTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyLnR0Zic7XHJcbmltcG9ydCBsaWJyZUJhc2tlcnZpbGxlSXRhbGljUGF0aCBmcm9tICdAc3JjL2Fzc2V0cy9mb250cy9MaWJyZV9CYXNrZXJ2aWxsZS9MaWJyZUJhc2tlcnZpbGxlLUl0YWxpYy50dGYnO1xyXG5pbXBvcnQgbGlicmVCYXNrZXJ2aWxsZUJvbGRQYXRoIGZyb20gJ0BzcmMvYXNzZXRzL2ZvbnRzL0xpYnJlX0Jhc2tlcnZpbGxlL0xpYnJlQmFza2VydmlsbGUtQm9sZC50dGYnO1xyXG5cclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgKiBhcyBQNUZvbnRSZW5kZXJlciBmcm9tICdAc3JjL3JlbmRlcmVycy9wNS9yZW5kZXItZm9udCc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0ICogYXMgT1RGRm9udFJlbmRlcmVyIGZyb20gJ0BzcmMvcmVuZGVyZXJzL290Zi9yZW5kZXItZm9udCc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0ICogYXMgT1RGRm9udFJlbmRlclN0cmF0ZWd5IGZyb20gJ0BzcmMvcmVuZGVyZXJzL290Zi9yZW5kZXItc3RyYXRlZ3knO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCAqIGFzIE9URlBhdGhQcmVwcm9jZXNzb3IgZnJvbSAnQHNyYy9yZW5kZXJlcnMvb3RmL3BhdGgtcHJlcHJvY2Vzc29yJztcclxuXHJcbmZ1bmN0aW9uIHNrZXRjaChwNTogcDUpOiB2b2lkIHtcclxuXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBsZXQgbGlicmVCYXNrZXJ2aWxsZVJlZ1A1IDogcDUuRm9udDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCBsaWJyZUJhc2tlcnZpbGxlUmVnT1RGIDogb3RmLkZvbnQ7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBsZXQgbGlicmVCYXNrZXJ2aWxsZUl0YWxpY1A1IDogcDUuRm9udDtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCBsaWJyZUJhc2tlcnZpbGxlQm9sZFA1IDogcDUuRm9udDtcclxuXHJcbiAgICBsZXQgc2FtcGxlVGV4dHM6IHN0cmluZ1tdID0gW1wiQXJjaGFlb3B0ZXJ5eFwiLCBcIlRoZSDigJxCaWcgRml2ZeKAnVwiLCBcIkVuZC1PcmRvdmljaWFuXCIsIFwiTGF0ZSBEZXZvbmlhblwiLCBcIkVuZC1QZXJtaWFuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRW5kLVRyaWFzc2ljXCIsIFwiRW5kLUNyZXRhY2VvdXNcIl07XHJcblxyXG4gICAgbGV0IHRleHQ6IHN0cmluZyA9IHNhbXBsZVRleHRzW01hdGgucm91bmQocDUucmFuZG9tKDAsIHNhbXBsZVRleHRzLmxlbmd0aCAtIDEpKV07XHJcbiAgICBsZXQgdHlwZVNpemU6IG51bWJlciA9IDE0ODtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGxldCB0ZXh0UGF0aHM6IG90Zi5QYXRoW107XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBsZXQgdW5wcm9jZXNzZWRUZXh0UGF0aHM6IG90Zi5QYXRoW107XHJcblxyXG4gICAgbGV0IGVyb3Npb25TdHJlbmd0aFNsaWRlcjogcDUuRWxlbWVudDtcclxuICAgIGxldCBlcm9zaW9uU3RyZW5ndGhWYWx1ZVRleHQ6IHA1LkVsZW1lbnQ7XHJcbiAgICBsZXQgZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyOiBwNS5FbGVtZW50O1xyXG4gICAgbGV0IGZyZWFrVG9DcmF6aW5lc3NWYWx1ZVRleHQ6IHA1LkVsZW1lbnQ7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVkcmF3Rm9udChpbW1lZGlhdGVseVJlZHJhdzogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcclxuICAgICAgICBwNS5iYWNrZ3JvdW5kKDI1NSk7XHJcblxyXG4gICAgICAgIGlmIChpbW1lZGlhdGVseVJlZHJhdykgeyAvLyB0aGlzIGNvbmRpdGlvbiBpcyBmb3Igd2hlbiB0aGUgdGV4dCBpcyB1cGRhdGVkIChmb3IgZGVidWdnaW5nKVxyXG4gICAgICAgICAgICBsZXQgcGF0aHM6IHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsVGV4dFBhdGg6IG90Zi5QYXRoW11cclxuICAgICAgICAgICAgICAgIHByb2Nlc3NlZFRleHRQYXRoOiBvdGYuUGF0aFtdXHJcbiAgICAgICAgICAgIH0gPSBPVEZGb250UmVuZGVyZXIuZ2V0VGV4dFBhdGhzKFxyXG4gICAgICAgICAgICAgICAgcDUsXHJcbiAgICAgICAgICAgICAgICBsaWJyZUJhc2tlcnZpbGxlUmVnT1RGLFxyXG4gICAgICAgICAgICAgICAgdGV4dCxcclxuICAgICAgICAgICAgICAgIHR5cGVTaXplLFxyXG4gICAgICAgICAgICAgICAgT1RGUGF0aFByZXByb2Nlc3Nvci5mcmVha1RvLFxyXG4gICAgICAgICAgICAgICAgeyBjcmF6aW5lc3M6IGZyZWFrVG9DcmF6aW5lc3NTdHJlbmd0aFNsaWRlci52YWx1ZSgpIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGV4dFBhdGhzID0gcGF0aHMucHJvY2Vzc2VkVGV4dFBhdGg7XHJcbiAgICAgICAgICAgIHVucHJvY2Vzc2VkVGV4dFBhdGhzID0gcGF0aHMub3JpZ2luYWxUZXh0UGF0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9URkZvbnRSZW5kZXJlci5yZW5kZXJGb250KFxyXG4gICAgICAgIC8vICAgICBwNSxcclxuICAgICAgICAvLyAgICAgdGV4dFBhdGhzLFxyXG4gICAgICAgIC8vICAgICBPVEZGb250UmVuZGVyU3RyYXRlZ3kuZXJvZGUsXHJcbiAgICAgICAgLy8gICAgIHsgZXJvc2lvblN0cmVuZ3RoOiAtZXJvc2lvblN0cmVuZ3RoU2xpZGVyLnZhbHVlKCkgfSxcclxuICAgICAgICAvLyAgICAgdW5wcm9jZXNzZWRUZXh0UGF0aHNcclxuICAgICAgICAvLyApO1xyXG5cclxuICAgICAgICBQNUZvbnRSZW5kZXJlci5yZW5kZXIoXHJcbiAgICAgICAgICAgIHA1LFxyXG4gICAgICAgICAgICBsaWJyZUJhc2tlcnZpbGxlUmVnUDUsXHJcbiAgICAgICAgICAgIHRleHQsXHJcbiAgICAgICAgICAgIHR5cGVTaXplLFxyXG4gICAgICAgICAgICAwLjEzLFxyXG4gICAgICAgICAgICBQNUZvbnRSZW5kZXJlci5yZW5kZXJTdHJhdGVneUJlb3d1bGZcclxuICAgICAgICApO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gcDUgZm9udCBpbml0aWFsaXphdGlvblxyXG4gICAgcDUucHJlbG9hZCA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICBsaWJyZUJhc2tlcnZpbGxlUmVnUDUgPSBwNS5sb2FkRm9udChsaWJyZUJhc2tlcnZpbGxlUmVnUGF0aCk7XHJcbiAgICAgICAgbGlicmVCYXNrZXJ2aWxsZUl0YWxpY1A1ID0gcDUubG9hZEZvbnQobGlicmVCYXNrZXJ2aWxsZUl0YWxpY1BhdGgpO1xyXG4gICAgICAgIGxpYnJlQmFza2VydmlsbGVCb2xkUDUgPSBwNS5sb2FkRm9udChsaWJyZUJhc2tlcnZpbGxlQm9sZFBhdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHA1LnNldHVwID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYWZ0ZXJwcmludFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZHJhd0ZvbnQoZmFsc2UpO1xyXG4gICAgICAgICAgICBlcm9zaW9uU3RyZW5ndGhTbGlkZXIudmFsdWUocGFyc2VGbG9hdChTdHJpbmcoZXJvc2lvblN0cmVuZ3RoU2xpZGVyLnZhbHVlKCkpKSArIDIpO1xyXG4gICAgICAgICAgICBlcm9zaW9uU3RyZW5ndGhWYWx1ZVRleHQuaHRtbChTdHJpbmcoZXJvc2lvblN0cmVuZ3RoU2xpZGVyLnZhbHVlKCkpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcDUuY3JlYXRlQ2FudmFzKHA1LndpbmRvd1dpZHRoLCBwNS53aW5kb3dIZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBvcGVudHlwZS5qcyBmb250IGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgb3RmLmxvYWQobGlicmVCYXNrZXJ2aWxsZVJlZ1BhdGgsIChlcnJvciwgZm9udCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9wZW50eXBlLmpzIHwgXCIgKyBsaWJyZUJhc2tlcnZpbGxlUmVnUGF0aCArIFwiIGNvdWxkIG5vdCBiZSBsb2FkZWQ6IFwiICsgZXJyb3IpO1xyXG4gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgIGlmIChmb250ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgIGxpYnJlQmFza2VydmlsbGVSZWdPVEYgPSBmb250O1xyXG4gICAgICAgICAgICAgICAgICAgcmVkcmF3Rm9udCgpO1xyXG4gICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvcGVudHlwZS5qcyB8IFwiICsgbGlicmVCYXNrZXJ2aWxsZVJlZ1BhdGggKyBcIiBsb2FkZWQuXCIpO1xyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvcGVudHlwZS5qcyB8IFwiICsgbGlicmVCYXNrZXJ2aWxsZVJlZ1BhdGggKyBcIiBjb3VsZCBub3QgYmUgbG9hZGVkOiBpdCB3YXMgdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzZXR0aW5nIHVwIHNsaWRlcnMgZm9yIGRlYnVnZ2luZ1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NTdHJlbmd0aFNsaWRlciA9IHA1LmNyZWF0ZVNsaWRlcigwLCAxMCwgMy41NiwgMC4wMSk7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyLnBvc2l0aW9uKDY1LCAxMCk7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyLnNpemUoMjAwKTtcclxuICAgICAgICBsZXQgZnJlYWtUb0NyYXppbmVzc0xhYmVsOiBwNS5FbGVtZW50ID0gcDUuY3JlYXRlUChcImNyYXp5XCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NMYWJlbC5zdHlsZShcInBvc2l0aW9uOiBhYnNvbHV0ZVwiKTtcclxuICAgICAgICBmcmVha1RvQ3JhemluZXNzTGFiZWwuc3R5bGUoXCJmb250LWZhbWlseTogbW9ub3NwYWNlXCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NMYWJlbC5zdHlsZShcImZvbnQtd2VpZ2h0OiBib2xkXCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NMYWJlbC5zdHlsZShcImZvbnQtc2l6ZTogMTVweFwiKTtcclxuICAgICAgICBmcmVha1RvQ3JhemluZXNzTGFiZWwuc3R5bGUoXCJsZWZ0OiAxMHB4XCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NMYWJlbC5zdHlsZShcInRvcDogLTNweFwiKTtcclxuICAgICAgICBmcmVha1RvQ3JhemluZXNzVmFsdWVUZXh0ID0gcDUuY3JlYXRlUChTdHJpbmcoZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyLnZhbHVlKCkpKTtcclxuICAgICAgICBmcmVha1RvQ3JhemluZXNzVmFsdWVUZXh0LnN0eWxlKFwicG9zaXRpb246IGFic29sdXRlXCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NWYWx1ZVRleHQuc3R5bGUoXCJmb250LWZhbWlseTogbW9ub3NwYWNlXCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NWYWx1ZVRleHQuc3R5bGUoXCJmb250LXNpemU6IDE1cHhcIik7XHJcbiAgICAgICAgZnJlYWtUb0NyYXppbmVzc1ZhbHVlVGV4dC5zdHlsZShcImxlZnQ6IDI4NXB4XCIpO1xyXG4gICAgICAgIGZyZWFrVG9DcmF6aW5lc3NWYWx1ZVRleHQuc3R5bGUoXCJ0b3A6IC0zcHhcIik7XHJcbiAgICAgICAgKGZyZWFrVG9DcmF6aW5lc3NTdHJlbmd0aFNsaWRlciBhcyBhbnkpLmNoYW5nZWQoKCkgPT4ge1xyXG4gICAgICAgICAgICByZWRyYXdGb250KCk7XHJcbiAgICAgICAgICAgIGZyZWFrVG9DcmF6aW5lc3NWYWx1ZVRleHQuaHRtbChTdHJpbmcoZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyLnZhbHVlKCkpKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZnJlYWtUb0NyYXppbmVzc1N0cmVuZ3RoU2xpZGVyLnZhbHVlKCkpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVyb3Npb25TdHJlbmd0aFNsaWRlciA9IHA1LmNyZWF0ZVNsaWRlcigwLCAxMCwgNC40NCwgMC4wMSk7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoU2xpZGVyLnBvc2l0aW9uKDY1LCA1MCk7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoU2xpZGVyLnNpemUoMjAwKTtcclxuICAgICAgICBsZXQgZXJvc2lvblN0cmVuZ3RoTGFiZWw6IHA1LkVsZW1lbnQgPSBwNS5jcmVhdGVQKFwiZXJvZGVcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoTGFiZWwuc3R5bGUoXCJwb3NpdGlvbjogYWJzb2x1dGVcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoTGFiZWwuc3R5bGUoXCJmb250LWZhbWlseTogbW9ub3NwYWNlXCIpO1xyXG4gICAgICAgIGVyb3Npb25TdHJlbmd0aExhYmVsLnN0eWxlKFwiZm9udC13ZWlnaHQ6IGJvbGRcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoTGFiZWwuc3R5bGUoXCJmb250LXNpemU6IDE1cHhcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoTGFiZWwuc3R5bGUoXCJsZWZ0OiAxMHB4XCIpO1xyXG4gICAgICAgIGVyb3Npb25TdHJlbmd0aExhYmVsLnN0eWxlKFwidG9wOiAzN3B4XCIpO1xyXG4gICAgICAgIGVyb3Npb25TdHJlbmd0aFZhbHVlVGV4dCA9IHA1LmNyZWF0ZVAoU3RyaW5nKGVyb3Npb25TdHJlbmd0aFNsaWRlci52YWx1ZSgpKSk7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoVmFsdWVUZXh0LnN0eWxlKFwicG9zaXRpb246IGFic29sdXRlXCIpO1xyXG4gICAgICAgIGVyb3Npb25TdHJlbmd0aFZhbHVlVGV4dC5zdHlsZShcImZvbnQtZmFtaWx5OiBtb25vc3BhY2VcIik7XHJcbiAgICAgICAgZXJvc2lvblN0cmVuZ3RoVmFsdWVUZXh0LnN0eWxlKFwiZm9udC1zaXplOiAxNXB4XCIpO1xyXG4gICAgICAgIGVyb3Npb25TdHJlbmd0aFZhbHVlVGV4dC5zdHlsZShcImxlZnQ6IDI4NXB4XCIpO1xyXG4gICAgICAgIGVyb3Npb25TdHJlbmd0aFZhbHVlVGV4dC5zdHlsZShcInRvcDogMzdweFwiKTtcclxuICAgICAgICAoZXJvc2lvblN0cmVuZ3RoU2xpZGVyIGFzIGFueSkuY2hhbmdlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZHJhd0ZvbnQoZmFsc2UpO1xyXG4gICAgICAgICAgICBlcm9zaW9uU3RyZW5ndGhWYWx1ZVRleHQuaHRtbChTdHJpbmcoZXJvc2lvblN0cmVuZ3RoU2xpZGVyLnZhbHVlKCkpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcDUud2luZG93UmVzaXplZCA9ICgpIDogdm9pZCA9PiB7XHJcbiAgICAgICAgcDUucmVzaXplQ2FudmFzKHA1LndpbmRvd1dpZHRoLCBwNS53aW5kb3dIZWlnaHQpO1xyXG5cclxuICAgICAgICByZWRyYXdGb250KGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwNS5rZXlQcmVzc2VkID0gKCkgOiB2b2lkID0+IHtcclxuICAgICAgICBsZXQgbmVlZHNVcGRhdGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKHA1LmtleS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChwNS5rZXkpIHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBwNS5rZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocDUua2V5ID09PSBcIkJhY2tzcGFjZVwiKSB7XHJcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIHRleHQubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIG5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKHA1LmtleSA9PT0gXCJFbnRlclwiKSB7XHJcbiAgICAgICAgICAgIHRleHQgKz0gXCJcXG5cIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHA1LmtleSA9PT0gXCJBcnJvd1VwXCIpIHtcclxuICAgICAgICAgICAgbmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5lZWRzVXBkYXRlKSByZWRyYXdGb250KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm5ldyBwNShza2V0Y2gpO1xyXG4iLCJpbXBvcnQgcDUgZnJvbSBcInA1XCI7XHJcbmltcG9ydCBvdGYgZnJvbSBcIm9wZW50eXBlLmpzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbm9QcmVwcm9jZXNzKF9wNTogcDUsIHRleHRQYXRoczogb3RmLlBhdGhbXSk6IG90Zi5QYXRoW10ge1xyXG4gICAgcmV0dXJuIHRleHRQYXRocztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZyZWFrVG8ocDU6IHA1LCB0ZXh0UGF0aHM6IG90Zi5QYXRoW10sIG9wdGlvbnM/OiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9KTogb3RmLlBhdGhbXSB7XHJcbiAgICBsZXQgcmFuZG9tVW5pdDogbnVtYmVyO1xyXG5cclxuICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCAhKFwiY3JhemluZXNzXCIgaW4gb3B0aW9ucykpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwicGF0aC1wcmVwcm9jZXNzb3IudHMgfCBmcmVha1RvIHJlY2VpdmVkIG1hbGZvcm1lZCBvcHRpb25zIHBhcmFtZXRlci5cIik7XHJcbiAgICAgICAgcmFuZG9tVW5pdCA9IDM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJhbmRvbVVuaXQgPSBvcHRpb25zW1wiY3JhemluZXNzXCJdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBwcm9jZXNzZWRUZXh0UGF0aHM6IG90Zi5QYXRoW10gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRleHRQYXRocykpO1xyXG5cclxuICAgIGZvciAobGV0IGNoYXJhY3RlckluZGV4ID0gMDsgY2hhcmFjdGVySW5kZXggPCB0ZXh0UGF0aHMubGVuZ3RoOyBjaGFyYWN0ZXJJbmRleCsrKXtcclxuICAgICAgICAvLyBnZXQgb3RmLlBhdGggb2JqZWN0IGZvciBjdXJyZW50IGNoYXJhY3RlclxyXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclBhdGg6IG90Zi5QYXRoID0gdGV4dFBhdGhzW2NoYXJhY3RlckluZGV4XTtcclxuICAgICAgICAvLyBUaGlzIHdpbGwgYWNjdW11bGF0ZSBhbGwgdGhlIG5ldyByYW5kb21pemVkIHBhdGggY29tbWFuZHMgdGhhdCB3ZSB3YW50XHJcbiAgICAgICAgbGV0IG5ld0NoYXJhY3RlclBhdGhDb21tYW5kczogb3RmLlBhdGhDb21tYW5kW10gPSBbXTtcclxuXHJcbiAgICAgICAgbGV0IHByZXZpb3VzUG9pbnQ6IFBvaW50ID0geyB4OiAwLCB5OiAwIH07XHJcblxyXG4gICAgICAgIC8vIHByb2Nlc3MgYWxsIHBhdGggY29tbWFuZHMgZm9yIHRoaXMgY3VycmVudCBjaGFyYWN0ZXJcclxuICAgICAgICBmb3IgKGxldCBjaGFyUGF0aENvbW1hbmRJbmRleCA9IDA7IGNoYXJQYXRoQ29tbWFuZEluZGV4IDwgY2hhcmFjdGVyUGF0aC5jb21tYW5kcy5sZW5ndGg7IGNoYXJQYXRoQ29tbWFuZEluZGV4Kyspe1xyXG4gICAgICAgICAgICBsZXQgY29tbWFuZCA9IGNoYXJhY3RlclBhdGguY29tbWFuZHNbY2hhclBhdGhDb21tYW5kSW5kZXhdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIk1cIjpcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGFyYWN0ZXJQYXRoQ29tbWFuZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiTVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBjb21tYW5kLnggKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBjb21tYW5kLnkgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBvdGYuUGF0aENvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxcIjpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGVycEludGVydmFsczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHA1LnJhbmRvbSgwLCByYW5kb21Vbml0IC0gMSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXJwSW50ZXJ2YWxzLnB1c2gocDUucmFuZG9tKDAsIDAuOSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXJwSW50ZXJ2YWxzLnNvcnQoKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiBhIC0gYik7IC8vIHNvcnQgaW4gYXNjZW5kaW5nIG9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbGVycEludGVydmFsIG9mIGxlcnBJbnRlcnZhbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxlcnBlZFg6IG51bWJlciA9IHA1LmxlcnAocHJldmlvdXNQb2ludC54LCBjb21tYW5kLngsIGxlcnBJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZXJwZWRZOiBudW1iZXIgPSBwNS5sZXJwKHByZXZpb3VzUG9pbnQueSwgY29tbWFuZC55LCBsZXJwSW50ZXJ2YWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgbmVlZCB0byB1cGRhdGUgdGhlIG9yaWdpbmFsIHRleHRQYXRocyBhcyB3ZSBhcmUgYWRkaW5nIGNvbW1hbmRzIHRoYXQgbmVlZCB0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiZSByZWZsZWN0ZWQgaW4gdGhlIG9yaWdpbmFsIHRleHRQYXRocyAoY2F1c2Ugd2UgbWlnaHQgbmVlZCB0byB1c2UgdGhlIG9yaWdpbmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRleHRQYXRocyBvdXRzaWRlIG9mIGhlcmUpIC0tIHRoaXMgd29ya3MgZmluZSBjYXVzZSBhcnJheXMgYXJlIHBhc3NlZCBieSByZWZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFBhdGhzW2NoYXJhY3RlckluZGV4XS5jb21tYW5kcy5zcGxpY2UoY2hhclBhdGhDb21tYW5kSW5kZXgsIDAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiTFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogbGVycGVkWCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGxlcnBlZFlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBvdGYuUGF0aENvbW1hbmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2hhcmFjdGVyUGF0aENvbW1hbmRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJMXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBsZXJwZWRYICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LzEuNSwgcmFuZG9tVW5pdC8xLjUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogbGVycGVkWSArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdC8xLjUsIHJhbmRvbVVuaXQvMS41KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGFzIG90Zi5QYXRoQ29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGFyYWN0ZXJQYXRoQ29tbWFuZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiTFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBjb21tYW5kLnggKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBjb21tYW5kLnkgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBvdGYuUGF0aENvbW1hbmQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBhcyB3ZSBoYXZlIHVwZGF0ZWQgdGhlIHRleHRQYXRocyBieSByZWZlcmVuY2Ugd2UgbmVlZCB0byBhZGp1c3QgdGhlIGNoYXJQYXRoQ29tbWFuZEluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gYmUgYWZ0ZXIgdGhlIG9yaWdpbmFsIFwiTFwiIGNvbW1hbmRcclxuICAgICAgICAgICAgICAgICAgICBjaGFyUGF0aENvbW1hbmRJbmRleCArPSBsZXJwSW50ZXJ2YWxzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoYXJhY3RlclBhdGhDb21tYW5kcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJDXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBjb21tYW5kLngxICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTE6IGNvbW1hbmQueTEgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MjogY29tbWFuZC54MiArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBjb21tYW5kLnkyICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogY29tbWFuZC54ICAgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBjb21tYW5kLnkgICArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdClcclxuICAgICAgICAgICAgICAgICAgICB9IGFzIG90Zi5QYXRoQ29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoYXJhY3RlclBhdGhDb21tYW5kcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJRXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBjb21tYW5kLngxICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTE6IGNvbW1hbmQueTEgKyBwNS5yYW5kb20oLXJhbmRvbVVuaXQsIHJhbmRvbVVuaXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBjb21tYW5kLnggICArIHA1LnJhbmRvbSgtcmFuZG9tVW5pdCwgcmFuZG9tVW5pdCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGNvbW1hbmQueSAgICsgcDUucmFuZG9tKC1yYW5kb21Vbml0LCByYW5kb21Vbml0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgb3RmLlBhdGhDb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJaXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hhcmFjdGVyUGF0aENvbW1hbmRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlpcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgb3RmLlBhdGhDb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbW1hbmQudHlwZSAhPT0gXCJaXCIpIHtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUG9pbnQueCA9IGNvbW1hbmQueDtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzUG9pbnQueSA9IGNvbW1hbmQueTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFmdGVyIHByb2Nlc3NpbmcgcGF0aHMgYW5kIGFkZGluZyBzb21lIHJhbmRvbWl6YXRpb24gbGV0J3MgYXNzaWduIGFsbCB0aGVcclxuICAgICAgICAvLyBuZXcgcGF0aCBjb21tYW5kcyB0byB0aGUgb3JpZ2luYWwgb3RmLlBhdGhbXSBvYmplY3QgcGFyYW1ldGVyXHJcbiAgICAgICAgcHJvY2Vzc2VkVGV4dFBhdGhzW2NoYXJhY3RlckluZGV4XS5jb21tYW5kcyA9IG5ld0NoYXJhY3RlclBhdGhDb21tYW5kcztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkVGV4dFBhdGhzO1xyXG59IiwiaW1wb3J0IG90ZiBmcm9tICdvcGVudHlwZS5qcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRlckNvdW50ZXIoZm9udDogb3RmLkZvbnQsIGNoYXJhY3Rlcjogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGlmIChjaGFyYWN0ZXIubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ0eXBlLWNvdW50ZXJzLnRzIHwgUGF0aENvdW50ZXJDb3VudGVyIGFjY2VwdGVkIGEgY2hhcmFjdGVyIG9mIHNpemUgXCIgKyBjaGFyYWN0ZXIubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGb250IHNpemUgYW5kIHggYW5kIHkgY29vcmRzIHVzZWQgaGVyZSBhcmUgZHVtbWllc1xyXG4gICAgcmV0dXJuIHBhdGhDb3VudGVyQ291bnRlcihmb250LmdldFBhdGgoY2hhcmFjdGVyWzBdLCAwLCAwLCAyMCkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGF0aENvdW50ZXJDb3VudGVyKGNoYXJhY3RlclBhdGg6IG90Zi5QYXRoKTogbnVtYmVyIHtcclxuXHJcbiAgICBsZXQgY291bnRlckNvdW50ZXI6IG51bWJlciA9IDA7XHJcblxyXG4gICAgZm9yIChsZXQgY29tbWFuZCBvZiBjaGFyYWN0ZXJQYXRoLmNvbW1hbmRzKSB7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQudHlwZSA9PT0gXCJaXCIpIHtcclxuICAgICAgICAgICAgY291bnRlckNvdW50ZXIgKz0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhpcyBhc3N1bWVzIHRoYXQgb3RmLlBhdGggU1ZHIGRyYXdpbmcgY29tbWFuZHMgYXJlIHN0cnVjdHVyZWQgd2l0aCB0aGUgYmFzZSBsZXR0ZXJmb3JtIHNoYXBlXHJcbiAgICAvLyBmb2xsb3dlZCBieSBjb3VudGVyc1xyXG4gICAgcmV0dXJuIGNvdW50ZXJDb3VudGVyID09PSAwID8gMCA6IGNvdW50ZXJDb3VudGVyIC0gMTtcclxufVxyXG5cclxuIiwiaW1wb3J0IG90ZiBmcm9tICdvcGVudHlwZS5qcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFNoYXBlc0Zyb21QYXRoKHBhdGg6IG90Zi5QYXRoKSA6IG90Zi5QYXRoQ29tbWFuZFtdW10ge1xyXG4gICAgbGV0IGN1cnJTaGFwZUNvdW50ZXI6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgY3VyclNoYXBlczogb3RmLlBhdGhDb21tYW5kW11bXSA9IFtbXV07XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGguY29tbWFuZHMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGxldCBjb21tYW5kID0gcGF0aC5jb21tYW5kc1tpXTtcclxuXHJcbiAgICAgICAgaWYgKGNvbW1hbmQudHlwZSAhPT0gXCJaXCIpIHsgLy8gaWYgd2UgYXJlbid0IGF0IGEgY2xvc2Ugc2hhcGUgY29tbWFuZFxyXG4gICAgICAgICAgICBjdXJyU2hhcGVzW2N1cnJTaGFwZUNvdW50ZXJdLnB1c2goY29tbWFuZClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBhcmUgYXQgYSBjbG9zZSBzaGFwZSBjb21tYW5kXHJcbiAgICAgICAgICAgIC8vIHB1c2ggXCJaXCJcclxuICAgICAgICAgICAgY3VyclNoYXBlc1tjdXJyU2hhcGVDb3VudGVyXS5wdXNoKGNvbW1hbmQpXHJcbiAgICAgICAgICAgIC8vIGluY3JlbWVudCB0aGUgY3VyclNoYXBlQ291bnRlclxyXG4gICAgICAgICAgICBjdXJyU2hhcGVDb3VudGVyKys7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZW4ndCBhdCB0aGUgbGFzdCBcIlpcIiB0aGVuIGtlZXAgZXhwYW5kaW5nIHRoZSBsaXN0XHJcbiAgICAgICAgICAgIGlmIChpICE9PSBwYXRoLmNvbW1hbmRzLmxlbmd0aCAtIDEpIGN1cnJTaGFwZXMucHVzaChbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdXJyU2hhcGVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RTdGFydFBvaW50SW5QYXRoKHBhdGhDb21tYW5kczogb3RmLlBhdGhDb21tYW5kW10pIDogKFBvaW50IHwgbnVsbCkge1xyXG4gICAgZm9yIChsZXQgY29tbWFuZCBvZiBwYXRoQ29tbWFuZHMpIHtcclxuICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSBcIkNcIiB8fCAgLy8gY3ViaWMgYmV6aWVyXHJcbiAgICAgICAgICAgIGNvbW1hbmQudHlwZSA9PT0gXCJMXCIgfHwgIC8vIGxpbmUgdG9cclxuICAgICAgICAgICAgY29tbWFuZC50eXBlID09PSBcIlFcIikgeyAgLy8gcXVhZHJhdGljIGJlemllclxyXG4gICAgICAgICAgICByZXR1cm4geyB4OiBjb21tYW5kLngsIHk6IGNvbW1hbmQueSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhDb21tYW5kc1RvUGF0aERhdGEocGF0aENvbW1hbmRzOiBvdGYuUGF0aENvbW1hbmRbXSwgZGVjaW1hbFBsYWNlczogbnVtYmVyKSA6IHN0cmluZyB7XHJcbiAgICBsZXQgcGF0aERhdGE6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgZm9yIChsZXQgY29tbWFuZCBvZiBwYXRoQ29tbWFuZHMpIHtcclxuICAgICAgICAvLyBcIlpcIiBpcyBhcHBlbmRlZCBhdXRvbWF0aWNhbGx5IGhlcmVcclxuICAgICAgICBwYXRoRGF0YSArPSBjb21tYW5kLnR5cGUgKyBcIiBcIjtcclxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiTVwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiTFwiOlxyXG4gICAgICAgICAgICAgICAgcGF0aERhdGEgKz0gY29tbWFuZC54LnRvRml4ZWQoZGVjaW1hbFBsYWNlcykgKyBcIixcIiArIGNvbW1hbmQueS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJDXCI6XHJcbiAgICAgICAgICAgICAgICBwYXRoRGF0YSArPSBjb21tYW5kLngxLnRvRml4ZWQoZGVjaW1hbFBsYWNlcykgKyBcIixcIiArIGNvbW1hbmQueTEudG9GaXhlZChkZWNpbWFsUGxhY2VzKSArIFwiIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLngyLnRvRml4ZWQoZGVjaW1hbFBsYWNlcykgKyBcIixcIiArIGNvbW1hbmQueTIudG9GaXhlZChkZWNpbWFsUGxhY2VzKSArIFwiIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLngudG9GaXhlZChkZWNpbWFsUGxhY2VzKSArIFwiLFwiICsgY29tbWFuZC55LnRvRml4ZWQoZGVjaW1hbFBsYWNlcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIlFcIjpcclxuICAgICAgICAgICAgICAgIHBhdGhEYXRhICs9IGNvbW1hbmQueDEudG9GaXhlZChkZWNpbWFsUGxhY2VzKSArIFwiLFwiICsgY29tbWFuZC55MS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpICsgXCIgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQueC50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpICsgXCIsXCIgKyBjb21tYW5kLnkudG9GaXhlZChkZWNpbWFsUGxhY2VzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGF0aERhdGE7XHJcbn0iLCJpbXBvcnQgcDUgZnJvbSAncDUnO1xyXG5pbXBvcnQgb3RmIGZyb20gJ29wZW50eXBlLmpzJztcclxuaW1wb3J0IHtwYXRoQ291bnRlckNvdW50ZXJ9IGZyb20gXCIuL3V0aWwvdHlwZS1jb3VudGVyc1wiO1xyXG5pbXBvcnQge2V4dHJhY3RTaGFwZXNGcm9tUGF0aCwgZ2V0Rmlyc3RTdGFydFBvaW50SW5QYXRoLCBwYXRoQ29tbWFuZHNUb1BhdGhEYXRhfSBmcm9tIFwiLi91dGlsL290Zi1wYXRoLXV0aWxzXCI7XHJcblxyXG50eXBlIEZvbnRSZW5kZXJTdHJhdGVneSA9IChwNTogcDUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRQYXRoczogb3RmLlBhdGhbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEZpbGxTdGF0dXNlczogRmlsbFN0YXR1c1tdW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiB2b2lkO1xyXG50eXBlIEZvbnRQcmVwcm9jZXNzb3IgPSAocDU6IHA1LCB0ZXh0UGF0aHM6IG90Zi5QYXRoW10sIG9wdGlvbnM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiBvdGYuUGF0aFtdO1xyXG5cclxuZXhwb3J0IGVudW0gRmlsbFN0YXR1cyB7XHJcbiAgICBGSUxMRUQgPSBcImZpbGxlZFwiLFxyXG4gICAgT1BFTiA9IFwib3BlblwiXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0ZXh0Rm9yZWdyb3VuZENvbG91ciA9IDA7XHJcbmV4cG9ydCBjb25zdCB0ZXh0QmFja2dyb3VuZENvbG91ciA9IDI1NTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0UGF0aHMocDU6IHA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IG90Zi5Gb250LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlU2l6ZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRQcmVwcm9jZXNzb3I6IEZvbnRQcmVwcm9jZXNzb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFByZXByb2Nlc3Nvck9wdGlvbnM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTpcclxuICAgIHsgb3JpZ2luYWxUZXh0UGF0aDogb3RmLlBhdGhbXSwgcHJvY2Vzc2VkVGV4dFBhdGg6IG90Zi5QYXRoW10gfSB7XHJcbiAgICBjb25zdCB0ZXh0UGF0aDogb3RmLlBhdGggPSBmb250LmdldFBhdGgodGV4dCwgMCwgMCwgdHlwZVNpemUsIHsga2VybmluZzogdHJ1ZSB9KTtcclxuICAgIGNvbnN0IHRleHRCb3VuZGluZ0JveDogb3RmLkJvdW5kaW5nQm94ID0gdGV4dFBhdGguZ2V0Qm91bmRpbmdCb3goKTtcclxuICAgIGNvbnN0IHRleHRIZWlnaHQ6IG51bWJlciA9IHRleHRCb3VuZGluZ0JveC55MiAtIHRleHRCb3VuZGluZ0JveC55MTtcclxuICAgIGNvbnN0IHRleHRXaWR0aDogbnVtYmVyID0gdGV4dEJvdW5kaW5nQm94LngyIC0gdGV4dEJvdW5kaW5nQm94LngxO1xyXG5cclxuICAgIGxldCB0ZXh0UGF0aHM6IG90Zi5QYXRoW10gPSBmb250LmdldFBhdGhzKFxyXG4gICAgICAgIHRleHQsXHJcbiAgICAgICAgKHA1LndpbmRvd1dpZHRoIC0gdGV4dFdpZHRoKSAvIDIsXHJcbiAgICAgICAgKHA1LndpbmRvd0hlaWdodCAtIHRleHRIZWlnaHQgKyB0eXBlU2l6ZSkgLyAyLFxyXG4gICAgICAgIHR5cGVTaXplLFxyXG4gICAgICAgIHsga2VybmluZzogdHJ1ZSB9XHJcbiAgICApO1xyXG5cclxuICAgIGxldCBwcm9jZXNzZWRUZXh0UGF0aHM6IG90Zi5QYXRoW10gPSBmb250UHJlcHJvY2Vzc29yKHA1LCB0ZXh0UGF0aHMsIGZvbnRQcmVwcm9jZXNzb3JPcHRpb25zKTtcclxuXHJcbiAgICBpZiAodGV4dFBhdGhzLmxlbmd0aCAhPT0gcHJvY2Vzc2VkVGV4dFBhdGhzLmxlbmd0aClcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwicmVuZGVyLWZvbnQudHMgfCBzb21ldGhpbmcgaGFzIGdvbmUgd3JvbmcgaW4gb3RmXFxyZW5kZXItZm9udC50cyNnZXRUZXh0UGF0aHNcIiArXHJcbiAgICAgICAgICAgIFwiIHJlZ2FyZGluZyB0aGUgbGVuZ3RocyBvZiB0aGUgb3V0cHV0dGVkIG90Zi5QYXRoW11cIik7XHJcblxyXG4gICAgcmV0dXJuIHsgb3JpZ2luYWxUZXh0UGF0aDogdGV4dFBhdGhzLCBwcm9jZXNzZWRUZXh0UGF0aDogcHJvY2Vzc2VkVGV4dFBhdGhzIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJGb250KHA1OiBwNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFBhdGhzOiBvdGYuUGF0aFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmb250UmVuZGVyZXI6IEZvbnRSZW5kZXJTdHJhdGVneSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFJlbmRlcmVyT3B0aW9ucz86IHsgW2tleTogc3RyaW5nXTogYW55IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHVucHJvY2Vzc2VkVGV4dFBhdGhzPzogb3RmLlBhdGhbXSkgOiBvdGYuUGF0aFtdIHtcclxuXHJcbiAgICAvLyBzb3J0aW5nIG91dCByZW5kZXJpbmcgaG9sZXMgaW4gZm9udHNcclxuICAgIC8vIHVucHJvY2Vzc2VkVGV4dFBhdGhzIGNhbiBiZSB1c2VkIGhlcmUgaWYgdGhlIHByb2Nlc3NpbmcgeW91IGRvIG9uIHlvdXIgdGV4dCBpcyBzbyBleHRyZW1lIHRoYXQgaXQgZGVzdHJveXNcclxuICAgIC8vIG15IHZlcnkgZmlja2xlIGFsZ29yaXRobSBmb3IgZGV0ZXJtaW5pbmcgdGhlIG51bWJlciBhbmQgb3JkZXIgb2YgaG9sZXMgaW4gYSBsZXR0ZXJmb3JtIDopXHJcbiAgICBjb25zdCB0ZXh0RmlsbFN0YXR1c2VzOiBGaWxsU3RhdHVzW11bXSA9IHVucHJvY2Vzc2VkVGV4dFBhdGhzID09PSB1bmRlZmluZWQgP1xyXG4gICAgICAgIGdldFRleHRGaWxsU3RhdHVzZXMocDUsIHRleHRQYXRocykgOiBnZXRUZXh0RmlsbFN0YXR1c2VzKHA1LCB1bnByb2Nlc3NlZFRleHRQYXRocyk7XHJcblxyXG4gICAgLy8gdW5wcm9jZXNzZWRUZXh0UGF0aHMgdGVuZCB0byBiZSB1c2VmdWwgaW4gRm9udFJlbmRlclN0cmF0ZWd5IGFzIHRoZXkgcHJlc2VydmUgdGhlIG9yaWdpbmFsIGdlb21ldHJ5XHJcbiAgICAvLyBhbmQgY3VydmVzIG9mIHRoZSBmb250IGJlZm9yZSB0aGV5IGFyZSBwcm9jZXNzZWQgY3JhemlseVxyXG4gICAgaWYgKGZvbnRSZW5kZXJlck9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiB1bnByb2Nlc3NlZFRleHRQYXRocyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9udFJlbmRlcmVyT3B0aW9uc1tcInVucHJvY2Vzc2VkVGV4dFBhdGhzXCJdID0gdW5wcm9jZXNzZWRUZXh0UGF0aHM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWN0dWFsbHkgcmVuZGVyaW5nIGZvbnRcclxuICAgIGZvbnRSZW5kZXJlcihwNSwgdGV4dFBhdGhzLCB0ZXh0RmlsbFN0YXR1c2VzLCBmb250UmVuZGVyZXJPcHRpb25zKTtcclxuXHJcbiAgICByZXR1cm4gdGV4dFBhdGhzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVNhbXBsZU9mZnNldEdyaWQoc2lkZUxlbmd0aDogbnVtYmVyLCBzYW1wbGVVbml0OiBudW1iZXIpOiBbeDogbnVtYmVyLCB5OiBudW1iZXJdW10ge1xyXG4gICAgaWYgKHNpZGVMZW5ndGggJSAyID09PSAwICkge1xyXG4gICAgICAgIHNpZGVMZW5ndGggKz0gMTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICBcInJlbmRlci1mb250LW90Zi50cyB8IGdlbmVyYXRlU2FtcGxlT2Zmc2V0R3JpZCByZWNlaXZlZCBhbiBldmVuIHNpZGUgbGVuZ3RoIG9mIFwiICsgKHNpZGVMZW5ndGggLSAxKVxyXG4gICAgICAgICAgICArIFwiLiBUaGUgYWN0dWFsIHNpZGUgbGVuZ3RoIG9mIHRoZSBncmlkIGdlbmVyYXRlZCB3aWxsIGJlIG9kZDogXCIgKyBzaWRlTGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc2FtcGxlT2Zmc2V0R3JpZDogW3g6IG51bWJlciwgeTogbnVtYmVyXVtdID0gW107XHJcbiAgICBsZXQgbWF4U2FtcGxlVW5pdFNjYWxlOiBudW1iZXIgPSBNYXRoLmZsb29yKHNpZGVMZW5ndGggLyAyKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gbWF4U2FtcGxlVW5pdFNjYWxlOyBpID49IC1tYXhTYW1wbGVVbml0U2NhbGU7IGktLSkge1xyXG4gICAgICAgIGZvciAobGV0IGogPSAtbWF4U2FtcGxlVW5pdFNjYWxlOyBqIDw9IG1heFNhbXBsZVVuaXRTY2FsZTsgaisrKSB7XHJcbiAgICAgICAgICAgIHNhbXBsZU9mZnNldEdyaWQucHVzaChbaiAqIHNhbXBsZVVuaXQsIC1pICogc2FtcGxlVW5pdF0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzYW1wbGVPZmZzZXRHcmlkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUZXh0RmlsbFN0YXR1c2VzKHA1OiBwNSwgdGV4dFBhdGhzOiBvdGYuUGF0aFtdKTogRmlsbFN0YXR1c1tdW10ge1xyXG4gICAgY29uc3QgdG9QYXRoRGF0YVJlc29sdXRpb246IG51bWJlciA9IDM7XHJcbiAgICBjb25zdCBzYW1wbGVVbml0OiBudW1iZXIgPSAyO1xyXG4gICAgY29uc3Qgc2FtcGxlT2Zmc2V0S2VybmVsOiBbeDogbnVtYmVyLCB5OiBudW1iZXJdW10gPSBnZW5lcmF0ZVNhbXBsZU9mZnNldEdyaWQoNSwgc2FtcGxlVW5pdCk7XHJcbiAgICBjb25zdCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IHA1LmRyYXdpbmdDb250ZXh0O1xyXG5cclxuICAgIGxldCB0ZXh0RmlsbFN0YXR1c2VzOiBGaWxsU3RhdHVzW11bXSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGNoYXJhY3RlckluZGV4ID0gMDsgY2hhcmFjdGVySW5kZXggPCB0ZXh0UGF0aHMubGVuZ3RoOyBjaGFyYWN0ZXJJbmRleCsrKXtcclxuICAgICAgICBjb25zdCBlbnRpcmVMZXR0ZXJmb3JtUGF0aCA9IHRleHRQYXRoc1tjaGFyYWN0ZXJJbmRleF07XHJcbiAgICAgICAgY29uc3QgY291bnRlckNvdW50OiBudW1iZXIgPSBwYXRoQ291bnRlckNvdW50ZXIoZW50aXJlTGV0dGVyZm9ybVBhdGgpO1xyXG5cclxuICAgICAgICB0ZXh0RmlsbFN0YXR1c2VzLnB1c2goW10pO1xyXG5cclxuICAgICAgICBpZiAoY291bnRlckNvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgdGV4dEZpbGxTdGF0dXNlc1tjaGFyYWN0ZXJJbmRleF0ucHVzaChGaWxsU3RhdHVzLkZJTExFRCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyB3aWxsIGluY3JlbWVudCBjaGFyYWN0ZXJJbmRleFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxldHRlcmZvcm1Db21wb25lbnRTaGFwZXM6IG90Zi5QYXRoQ29tbWFuZFtdW10gPSBleHRyYWN0U2hhcGVzRnJvbVBhdGgoZW50aXJlTGV0dGVyZm9ybVBhdGgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBsZXR0ZXJmb3JtQ29tcG9uZW50U2hhcGUgb2YgbGV0dGVyZm9ybUNvbXBvbmVudFNoYXBlcykge1xyXG4gICAgICAgICAgICBsZXQgc2FtcGxlUG9pbnQ6IFBvaW50IHwgbnVsbCA9IGdldEZpcnN0U3RhcnRQb2ludEluUGF0aChsZXR0ZXJmb3JtQ29tcG9uZW50U2hhcGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNhbXBsZVBvaW50ID09PSBudWxsIHx8IHNhbXBsZVBvaW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJyZW5kZXItZm9udC1vdGYudHMgfCBzYW1wbGVQb2ludC54IGFuZCBzYW1wbGVQb2ludC55IHdhcyBudWxsXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHNhbXBsZSBhcm91bmQgdGhlIChzYW1wbGVYLCBzYW1wbGVZKSBjb29yZGluYXRlIHdlIGhhdmUgYW5kIHRlc3QgYWdhaW5zdFxyXG4gICAgICAgICAgICAvLyBjdHguaXNQb2ludEluUGF0aCB3aXRoIHRoZSByZWxldmFudCBlbnRpcmVMZXR0ZXJmb3JtUGF0aCBhcyB0aGUgcGF0aFxyXG4gICAgICAgICAgICBsZXQgc2FtcGxlUG9pbnRPZmZzZXQ6IFBvaW50ID0ge3g6IHNhbXBsZVBvaW50LngsIHk6IHNhbXBsZVBvaW50Lnl9O1xyXG4gICAgICAgICAgICBsZXQgd2FzRmlsbFN0YXR1c0Fzc2lnbmVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBzYW1wbGVPZmZzZXQgb2Ygc2FtcGxlT2Zmc2V0S2VybmVsKSB7XHJcbiAgICAgICAgICAgICAgICBzYW1wbGVQb2ludE9mZnNldC54ID0gc2FtcGxlUG9pbnQueCArIHNhbXBsZU9mZnNldFswXTtcclxuICAgICAgICAgICAgICAgIHNhbXBsZVBvaW50T2Zmc2V0LnkgPSBzYW1wbGVQb2ludC55ICsgc2FtcGxlT2Zmc2V0WzFdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNlYXJjaGluZyB0byBzZWUgaWYgd2UncmUgaW5zaWRlIHRoZSBjdXJyZW50IHNoYXBlXHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgcDUucGl4ZWxEZW5zaXR5KCkgcGFydCBpcyBDUlVDSUFMIVxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyUGF0aDJEOiBQYXRoMkQgPVxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQYXRoMkQocGF0aENvbW1hbmRzVG9QYXRoRGF0YShsZXR0ZXJmb3JtQ29tcG9uZW50U2hhcGUsIHRvUGF0aERhdGFSZXNvbHV0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0luUGF0aDogYm9vbGVhbiA9IGN0eC5pc1BvaW50SW5QYXRoKFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlclBhdGgyRCxcclxuICAgICAgICAgICAgICAgICAgICBwNS5waXhlbERlbnNpdHkoKSAqIHNhbXBsZVBvaW50T2Zmc2V0LngsXHJcbiAgICAgICAgICAgICAgICAgICAgcDUucGl4ZWxEZW5zaXR5KCkgKiBzYW1wbGVQb2ludE9mZnNldC55LFxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0luU3Ryb2tlOiBib29sZWFuID0gY3R4LmlzUG9pbnRJblN0cm9rZShcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJQYXRoMkQsXHJcbiAgICAgICAgICAgICAgICAgICAgcDUucGl4ZWxEZW5zaXR5KCkgKiBzYW1wbGVQb2ludE9mZnNldC54LFxyXG4gICAgICAgICAgICAgICAgICAgIHA1LnBpeGVsRGVuc2l0eSgpICogc2FtcGxlUG9pbnRPZmZzZXQueSxcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc3RvcCBzZWFyY2hpbmcgaWYgd2UndmUgZm91bmQgYSBwb2ludCB3aXRoaW4gdGhlIHBhdGggYW5kIG5vdCBvbiB0aGUgc3Ryb2tlIGFzIHRoaXMgd29uJ3RcclxuICAgICAgICAgICAgICAgIC8vIHNob3cgdXAgaW4gZnV0dXJlIGlzUG9pbnRJblBhdGggY2FsY3VsYXRpb25zIHdpdGggdGhlIGVudGlyZSBsZXR0ZXJmb3JtXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNJblBhdGggJiYgIWlzSW5TdHJva2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXNGaWxsU3RhdHVzQXNzaWduZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcmFjdGVyU2hhcGVQYXRoMkQ6IFBhdGgyRCA9IG5ldyBQYXRoMkQoZW50aXJlTGV0dGVyZm9ybVBhdGgudG9QYXRoRGF0YSh0b1BhdGhEYXRhUmVzb2x1dGlvbikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIHNhbXBsZSB0aGlzIHBvaW50IGluIHRoZSB0ZXh0UGF0aCB1c2luZyBjdHguaXNQb2ludEluUGF0aFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzSW5QYXRoOiBib29sZWFuID0gY3R4LmlzUG9pbnRJblBhdGgoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlclNoYXBlUGF0aDJELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwNS5waXhlbERlbnNpdHkoKSAqIHNhbXBsZVBvaW50T2Zmc2V0LngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHA1LnBpeGVsRGVuc2l0eSgpICogc2FtcGxlUG9pbnRPZmZzZXQueSxcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0luU3Ryb2tlOiBib29sZWFuID0gY3R4LmlzUG9pbnRJblN0cm9rZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyU2hhcGVQYXRoMkQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHA1LnBpeGVsRGVuc2l0eSgpICogc2FtcGxlUG9pbnRPZmZzZXQueCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDUucGl4ZWxEZW5zaXR5KCkgKiBzYW1wbGVQb2ludE9mZnNldC55LFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIG9ubHkgTk9UIGluIGEgY291bnRlci9zb21ldGhpbmcgdGhhdCBzaG91bGRuJ3QgYmUgZmlsbGVkIHdoZW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpc0luUGF0aCA9PT0gRkFMU0UgJiYgaXNJblN0cm9rZSA9PT0gRkFMU0U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5QYXRoIHx8IGlzSW5TdHJva2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEZpbGxTdGF0dXNlc1tjaGFyYWN0ZXJJbmRleF0ucHVzaChGaWxsU3RhdHVzLkZJTExFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEZpbGxTdGF0dXNlc1tjaGFyYWN0ZXJJbmRleF0ucHVzaChGaWxsU3RhdHVzLk9QRU4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE8gbmVlZCB0byBkbyBlcnJvciBoYW5kbGluZyBmb3Igd2hhdCBoYXBwZW5zIHdoZW4gd2UgZmFsbCB0aHJvdWdoIGhlcmUgd2l0aG91dCBhIHN0YXR1c1xyXG4gICAgICAgICAgICBpZiAoIXdhc0ZpbGxTdGF0dXNBc3NpZ25lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gdGV4dEZpbGxTdGF0dXNlc1tjaGFyYWN0ZXJJbmRleF0ucHVzaChGaWxsU3RhdHVzLkZJTExFRCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicmVuZGVyLWZvbnQtb3RmLnRzIHwgZ2V0VGV4dEZpbGxTdGF0dXNlcyBjb3VsZCBub3QgZmluZCBhIHN1aXRhYmxlIHNhbXBsZSBwb2ludCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIoYXQgY2hhcmFjdGVyIGluZGV4IFwiICsgY2hhcmFjdGVySW5kZXggKyBcIikgZm9yIGNhbGN1bGF0aW5nIHRleHQgZmlsbCBzdGF0dXNcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGV4dEZpbGxTdGF0dXNlcztcclxufVxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbInJlbmRlciIsInA1IiwiZm9udCIsInRleHQiLCJmb250U2l6ZSIsImZvbnRTYW1wbGVGYWN0b3IiLCJmb250UmVuZGVyZXIiLCJudW1iZXJPZkxpbmVzIiwic3BsaXQiLCJsZW5ndGgiLCJ0ZXh0Rm9udCIsInRleHRTaXplIiwicG9pbnRzIiwidGV4dFRvUG9pbnRzIiwid2luZG93V2lkdGgiLCJ0ZXh0V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJ0ZXh0QXNjZW50IiwidGV4dERlc2NlbnQiLCJzYW1wbGVGYWN0b3IiLCJyZW5kZXJTdHJhdGVneUJlb3d1bGYiLCJjb25zb2xlIiwibG9nIiwieCIsInJhbmRvbSIsInkiLCJwdXNoIiwic3Ryb2tlV2VpZ2h0IiwiZmlsbCIsImJlZ2luU2hhcGUiLCJpIiwicG9pbnQxIiwicG9pbnQyIiwiZHgiLCJkeSIsIk1hdGgiLCJzcXJ0IiwiZW5kU2hhcGUiLCJDTE9TRSIsInZlcnRleCIsInBvcCIsImxpYnJlQmFza2VydmlsbGVSZWdQNSIsImxpYnJlQmFza2VydmlsbGVSZWdPVEYiLCJsaWJyZUJhc2tlcnZpbGxlSXRhbGljUDUiLCJsaWJyZUJhc2tlcnZpbGxlQm9sZFA1IiwidGV4dFBhdGhzIiwidW5wcm9jZXNzZWRUZXh0UGF0aHMiLCJlcm9zaW9uU3RyZW5ndGhTbGlkZXIiLCJlcm9zaW9uU3RyZW5ndGhWYWx1ZVRleHQiLCJmcmVha1RvQ3JhemluZXNzU3RyZW5ndGhTbGlkZXIiLCJmcmVha1RvQ3JhemluZXNzVmFsdWVUZXh0Iiwic2FtcGxlVGV4dHMiLCJyb3VuZCIsInJlZHJhd0ZvbnQiLCJpbW1lZGlhdGVseVJlZHJhdyIsImJhY2tncm91bmQiLCJwYXRocyIsImNyYXppbmVzcyIsInZhbHVlIiwicHJvY2Vzc2VkVGV4dFBhdGgiLCJvcmlnaW5hbFRleHRQYXRoIiwicHJlbG9hZCIsImxvYWRGb250Iiwic2V0dXAiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicGFyc2VGbG9hdCIsIlN0cmluZyIsImh0bWwiLCJjcmVhdGVDYW52YXMiLCJlcnJvciIsInVuZGVmaW5lZCIsImNyZWF0ZVNsaWRlciIsInBvc2l0aW9uIiwic2l6ZSIsImZyZWFrVG9DcmF6aW5lc3NMYWJlbCIsImNyZWF0ZVAiLCJzdHlsZSIsImNoYW5nZWQiLCJlcm9zaW9uU3RyZW5ndGhMYWJlbCIsIndpbmRvd1Jlc2l6ZWQiLCJyZXNpemVDYW52YXMiLCJrZXlQcmVzc2VkIiwibmVlZHNVcGRhdGUiLCJrZXkiLCJzbGljZSIsImZyZWFrVG8iLCJvcHRpb25zIiwicmFuZG9tVW5pdCIsInByb2Nlc3NlZFRleHRQYXRocyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImNoYXJhY3RlckluZGV4IiwiY2hhcmFjdGVyUGF0aCIsIm5ld0NoYXJhY3RlclBhdGhDb21tYW5kcyIsInByZXZpb3VzUG9pbnQiLCJjaGFyUGF0aENvbW1hbmRJbmRleCIsImNvbW1hbmRzIiwiY29tbWFuZCIsInR5cGUiLCJsZXJwSW50ZXJ2YWxzIiwic29ydCIsImEiLCJiIiwibGVycEludGVydmFsIiwibGVycGVkWCIsImxlcnAiLCJsZXJwZWRZIiwic3BsaWNlIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwYXRoQ291bnRlckNvdW50ZXIiLCJjb3VudGVyQ291bnRlciIsImV4dHJhY3RTaGFwZXNGcm9tUGF0aCIsInBhdGgiLCJjdXJyU2hhcGVDb3VudGVyIiwiY3VyclNoYXBlcyIsImdldEZpcnN0U3RhcnRQb2ludEluUGF0aCIsInBhdGhDb21tYW5kcyIsInBhdGhDb21tYW5kc1RvUGF0aERhdGEiLCJkZWNpbWFsUGxhY2VzIiwicGF0aERhdGEiLCJ0b0ZpeGVkIiwiRmlsbFN0YXR1cyIsInRleHRGb3JlZ3JvdW5kQ29sb3VyIiwidGV4dEJhY2tncm91bmRDb2xvdXIiLCJnZXRUZXh0UGF0aHMiLCJ0eXBlU2l6ZSIsImZvbnRQcmVwcm9jZXNzb3IiLCJmb250UHJlcHJvY2Vzc29yT3B0aW9ucyIsInRleHRCb3VuZGluZ0JveCIsImdldFBhdGgiLCJrZXJuaW5nIiwiZ2V0Qm91bmRpbmdCb3giLCJ0ZXh0SGVpZ2h0IiwiZ2V0UGF0aHMiLCJyZW5kZXJGb250IiwiZm9udFJlbmRlcmVyT3B0aW9ucyIsInRleHRGaWxsU3RhdHVzZXMiLCJzYW1wbGVPZmZzZXRLZXJuZWwiLCJzaWRlTGVuZ3RoIiwic2FtcGxlVW5pdCIsInNhbXBsZU9mZnNldEdyaWQiLCJtYXhTYW1wbGVVbml0U2NhbGUiLCJmbG9vciIsImoiLCJnZW5lcmF0ZVNhbXBsZU9mZnNldEdyaWQiLCJjdHgiLCJkcmF3aW5nQ29udGV4dCIsImVudGlyZUxldHRlcmZvcm1QYXRoIiwiY291bnRlckNvdW50IiwiRklMTEVEIiwibGV0dGVyZm9ybUNvbXBvbmVudFNoYXBlcyIsImxldHRlcmZvcm1Db21wb25lbnRTaGFwZSIsInNhbXBsZVBvaW50Iiwic2FtcGxlUG9pbnRPZmZzZXQiLCJ3YXNGaWxsU3RhdHVzQXNzaWduZWQiLCJzYW1wbGVPZmZzZXQiLCJjaGFyYWN0ZXJQYXRoMkQiLCJQYXRoMkQiLCJpc0luUGF0aCIsImlzUG9pbnRJblBhdGgiLCJwaXhlbERlbnNpdHkiLCJpc0luU3Ryb2tlIiwiaXNQb2ludEluU3Ryb2tlIiwiY2hhcmFjdGVyU2hhcGVQYXRoMkQiLCJ0b1BhdGhEYXRhIiwiT1BFTiIsImdldFRleHRGaWxsU3RhdHVzZXMiXSwic291cmNlUm9vdCI6IiJ9