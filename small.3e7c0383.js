"use strict";(self.webpackChunkrandomfont=self.webpackChunkrandomfont||[]).push([[284],{169:(s,e,a)=>{var t=a(996),n=a.n(t);const o=a.p+"assets/images/a_0.e0009d76.png",r=a.p+"assets/images/a_1.586540b9.png",g=a.p+"assets/images/a_2.0a02a308.png",i=a.p+"assets/images/a_3.49d42d64.png",p=a.p+"assets/images/a_4.f91e1190.png",d=a.p+"assets/images/m_0.60ad00cb.png",c=a.p+"assets/images/m_1.932385de.png",m=a.p+"assets/images/m_2.494ec28a.png",h=a.p+"assets/images/m_3.40d1d196.png",l=a.p+"assets/images/n_0.394e82cc.png",u=a.p+"assets/images/n_1.14a88ea4.png",f=a.p+"assets/images/n_2.52158759.png",w=a.p+"assets/images/n_3.4711ec31.png",_=a.p+"assets/images/n_4.9bd0dac1.png",b=a.p+"assets/images/n_5.55d33ace.png",k=a.p+"assets/images/n_6.3c9820bc.png",E=a.p+"assets/images/o_0.96bd9cf4.png",M=a.p+"assets/images/o_1.e9a664c3.png",C=a.p+"assets/images/o_2.62c7f836.png",v=a.p+"assets/images/o_3.f118c974.png",x=a.p+"assets/images/o_4.64232944.png",O=a.p+"assets/images/o_5.a0ebdc25.png",y=a.p+"assets/images/o_6.130bf27d.png",R=a.p+"assets/images/r_0.dc2a1c67.png",B=a.p+"assets/images/r_1.362d79a0.png",I=a.p+"assets/images/r_2.6a0b2bf7.png",S=a.p+"assets/images/r_3.7edd5018.png",X=a.p+"assets/images/r_4.6bf3acd9.png",Y=a.p+"assets/images/r_5.50f13322.png",F=a.p+"assets/images/r_6.b5b71a82.png",N=a.p+"assets/images/s_0.7b2d0518.png",P=a.p+"assets/images/s_1.fca9723a.png",W=a.p+"assets/images/s_2.cb1a731c.png",q=a.p+"assets/images/s_3.da068ed2.png",z=a.p+"assets/images/s_4.af8244f2.png",H=a.p+"assets/images/s_5.29e45593.png",L=new Map([["a",[o,r,g,i,p]],["m",[d,c,m,h]],["n",[l,u,f,w,_,b,k]],["o",[E,M,C,v,x,O,y]],["r",[R,B,I,S,X,Y,F]],["s",[N,P,W,q,z,H]]]),T="ransom";let D=0;const G="rgba(0, 0, 0, 0.34)",K=.5,U=[],j=new Map;let A,J,Q={x:0,y:0},V=0;new(n())(function(s){function e(e=!0){if(D>=6)return D+=1,null;console.log(T[D]);const a=function(e,a=!0){const t=j.get(e);if(!t)return;const n=Math.floor(s.random()*t.length),o=t[n];return a&&t.splice(n,1),o}(T[D],e);return D+=1,a}s.preload=()=>{s.angleMode(s.DEGREES);const a=function(s){const e=function(s){return new URLSearchParams(window.location.search).get(s)}(s);if(null===e)return null;const a=Number(e);return Number.isFinite(a)?a:null}("random-seed");null!==a&&(s.randomSeed(a),console.log("sketch.ts | the current random seed (via query param) is: "+a)),L.forEach((e,a)=>{j.set(a,[]),e.forEach(e=>{j.get(a)?.push(s.loadImage(e))})});const t=e();void 0!==t?null!==t?(A=t,V=s.random(-30,30)):console.error("sketch.ts | Fatal Error: the first request for getNextRandomLetterImage() has reachedthe end of wordToSpell"):console.error('sketch.ts | Fatal Error: at letter "'+T[0]+'" there was no associated image paths in letterImageMap (.get returned undefined).')},s.setup=()=>{s.createCanvas(s.windowWidth,s.windowHeight),J=s.drawingContext,s.cursor("grab")},s.draw=()=>{s.clear();const e=D>=7;if(console.log(D+" >= 6"),console.log(e),e||function(){const e=Math.min(s.width/20,s.height/20);s.push(),s.stroke(100,Math.round(38.25)),s.strokeWeight(.6);const a=Math.ceil(s.width/2/e);for(let t=-a;t<a;t++)s.line(s.width/2+t*e,0,s.width/2+t*e,s.height);const t=Math.ceil(s.height/2/e);for(let a=-t;a<t;a++)s.line(0,s.height/2+a*e,s.width,s.height/2+a*e);s.pop()}(),U.forEach(({sticker:e,coordinates:a,rotation:t})=>{const n=e.width*K,o=e.height*K;s.push(),s.translate(a.x+n/2,a.y+o/2),s.rotate(t),J.save(),J.shadowColor=G,J.shadowBlur=3,J.shadowOffsetX=0,J.shadowOffsetY=0,s.image(e,-n/2,-o/2,n,o),J.restore(),s.pop()}),e)return;const a=s.mouseIsPressed&&"left"===s.mouseButton;J.save(),a?(J.shadowColor=G,J.shadowBlur=3,J.shadowOffsetX=0,J.shadowOffsetY=0):(J.shadowColor="rgba(0, 0, 0, 0.2)",J.shadowBlur=12,J.shadowOffsetX=-3,J.shadowOffsetY=3);const t=a?Q.x:s.mouseX,n=a?Q.y:s.mouseY,o=A.width*(a?1:1.03)*K,r=A.height*(a?1:1.03)*K;s.push(),s.translate(t,n),s.rotate(V),s.image(A,-o/2,-r/2,o,r),s.pop(),J.restore()},s.windowResized=()=>{s.resizeCanvas(s.windowWidth,s.windowHeight)},s.mousePressed=()=>{"left"===s.mouseButton&&(Q.x=s.mouseX,Q.y=s.mouseY)},s.mouseReleased=()=>{if("left"!==s.mouseButton||D>=7)return;U.push({sticker:A,coordinates:{x:Q.x-A.width*K/2,y:Q.y-A.height*K/2},rotation:V});const a=e();void 0!==a?(null===a?(console.log("NO MORE STICKERS!!"),s.cursor("not-allowed")):(A=a,console.log(j)),V=s.random(-30,30),console.log(V)):console.error('sketch.ts | Fatal Error: at letter "'+T[0]+'" there was no associated image paths in letterImageMap (.get returned undefined).')}})}},s=>{s(s.s=169)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,